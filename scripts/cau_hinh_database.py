#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script c·∫•u h√¨nh k·∫øt n·ªëi database linh ho·∫°t
D·ª± √°n t·ªët nghi·ªáp - Tableau Universal Database Connector

M·ª•c ƒë√≠ch: K·∫øt n·ªëi Tableau v·ªõi b·∫•t k·ª≥ SQL Server database n√†o
"""

import json
import os

def tao_config_ket_noi():
    """
    T·∫°o file c·∫•u h√¨nh k·∫øt n·ªëi database linh ho·∫°t
    """
    print("üîß C·∫§U H√åNH K·∫æT N·ªêI DATABASE")
    print("=" * 50)
    
    config = {}
    
    # Th√¥ng tin server
    print("\nüì° TH√îNG TIN SERVER:")
    config['server'] = input("Server (m·∫∑c ƒë·ªãnh: 127.0.0.1): ").strip() or "127.0.0.1"
    config['port'] = int(input("Port (m·∫∑c ƒë·ªãnh: 1433): ").strip() or "1433")
    config['user'] = input("Username (m·∫∑c ƒë·ªãnh: sa): ").strip() or "sa"
    config['password'] = input("Password: ").strip() or "YourStrong!Pass123"
    
    # Danh s√°ch databases c√≥ s·∫µn
    print("\nüìä CH·ªåN DATABASE:")
    print("1. Nh·∫≠p t√™n database c√≥ s·∫µn")
    print("2. Li·ªát k√™ t·∫•t c·∫£ databases tr√™n server")
    
    lua_chon = input("Ch·ªçn c√°ch (1-2): ").strip()
    
    if lua_chon == "2":
        # K·∫øt n·ªëi ƒë·ªÉ li·ªát k√™ databases
        try:
            import pymssql
            ket_noi = pymssql.connect(
                server=config['server'],
                port=config['port'],
                user=config['user'],
                password=config['password']
            )
            
            con_tro = ket_noi.cursor()
            con_tro.execute("SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb')")
            databases = con_tro.fetchall()
            
            print("\nüìã Databases c√≥ s·∫µn:")
            for i, db in enumerate(databases, 1):
                print(f"{i}. {db[0]}")
            
            if databases:
                chon_db = int(input(f"Ch·ªçn database (1-{len(databases)}): ")) - 1
                config['database'] = databases[chon_db][0]
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y database n√†o")
                config['database'] = input("Nh·∫≠p t√™n database: ").strip()
            
            ket_noi.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi: {e}")
            config['database'] = input("Nh·∫≠p t√™n database: ").strip()
    else:
        config['database'] = input("T√™n database: ").strip()
    
    # L∆∞u config
    config_path = "config/database_config.json"
    os.makedirs("config", exist_ok=True)
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o: {config_path}")
    return config

def kiem_tra_bang_trong_database(config):
    """
    Li·ªát k√™ t·∫•t c·∫£ b·∫£ng trong database
    """
    print(f"\nüìä LI·ªÜT K√ä B·∫¢NG TRONG DATABASE: {config['database']}")
    print("-" * 50)
    
    try:
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        
        # L·∫•y danh s√°ch b·∫£ng
        con_tro.execute("""
        SELECT TABLE_NAME, TABLE_TYPE 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_TYPE = 'BASE TABLE'
        ORDER BY TABLE_NAME
        """)
        
        bang_list = con_tro.fetchall()
        
        print(f"üìã T√¨m th·∫•y {len(bang_list)} b·∫£ng:")
        for i, (ten_bang, loai_bang) in enumerate(bang_list, 1):
            # ƒê·∫øm s·ªë d√≤ng trong b·∫£ng
            try:
                con_tro.execute(f"SELECT COUNT(*) FROM [{ten_bang}]")
                so_dong = con_tro.fetchone()[0]
                print(f"{i:2d}. {ten_bang} ({so_dong:,} d√≤ng)")
            except:
                print(f"{i:2d}. {ten_bang} (kh√¥ng ƒë·∫øm ƒë∆∞·ª£c)")
        
        ket_noi.close()
        return [bang[0] for bang in bang_list]
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return []

def phan_tich_cau_truc_bang(config, ten_bang):
    """
    Ph√¢n t√≠ch c·∫•u tr√∫c c·ªßa b·∫£ng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o schema
    """
    print(f"\nüîç PH√ÇN T√çCH B·∫¢NG: {ten_bang}")
    print("-" * 50)
    
    try:
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        
        # L·∫•y th√¥ng tin c·ªôt
        con_tro.execute(f"""
        SELECT 
            COLUMN_NAME,
            DATA_TYPE,
            IS_NULLABLE,
            CHARACTER_MAXIMUM_LENGTH,
            NUMERIC_PRECISION,
            NUMERIC_SCALE
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_NAME = '{ten_bang}'
        ORDER BY ORDINAL_POSITION
        """)
        
        cot_list = con_tro.fetchall()
        
        print("üìã C·∫•u tr√∫c b·∫£ng:")
        schema_info = []
        
        for cot in cot_list:
            ten_cot, data_type, nullable, max_len, precision, scale = cot
            
            # Chuy·ªÉn ƒë·ªïi SQL Server data type sang Tableau data type
            if data_type in ['int', 'bigint', 'smallint', 'tinyint']:
                tableau_type = 'int'
            elif data_type in ['decimal', 'numeric', 'float', 'real', 'money']:
                tableau_type = 'float'
            elif data_type in ['datetime', 'datetime2', 'date', 'time']:
                tableau_type = 'datetime'
            elif data_type in ['bit']:
                tableau_type = 'bool'
            else:
                tableau_type = 'string'
            
            schema_info.append({
                'column_name': ten_cot,
                'sql_type': data_type,
                'tableau_type': tableau_type,
                'nullable': nullable == 'YES'
            })
            
            nullable_str = "NULL" if nullable == "YES" else "NOT NULL"
            print(f"  - {ten_cot:<20} {data_type:<15} {nullable_str:<10} ‚Üí {tableau_type}")
        
        # L·∫•y d·ªØ li·ªáu m·∫´u
        print(f"\nüìä D·ªØ li·ªáu m·∫´u (5 d√≤ng ƒë·∫ßu):")
        con_tro.execute(f"SELECT TOP 5 * FROM [{ten_bang}]")
        du_lieu_mau = con_tro.fetchall()
        
        if du_lieu_mau:
            # In header
            ten_cot_list = [info['column_name'] for info in schema_info]
            print(" | ".join(f"{ten:<15}" for ten in ten_cot_list[:5]))  # Ch·ªâ hi·ªÉn th·ªã 5 c·ªôt ƒë·∫ßu
            print("-" * 80)
            
            # In d·ªØ li·ªáu
            for dong in du_lieu_mau:
                dong_str = []
                for i, gia_tri in enumerate(dong[:5]):  # Ch·ªâ hi·ªÉn th·ªã 5 c·ªôt ƒë·∫ßu
                    if gia_tri is None:
                        dong_str.append("NULL".ljust(15))
                    else:
                        dong_str.append(str(gia_tri)[:15].ljust(15))
                print(" | ".join(dong_str))
        
        ket_noi.close()
        
        # L∆∞u schema info
        schema_path = f"config/schema_{ten_bang}.json"
        with open(schema_path, 'w', encoding='utf-8') as f:
            json.dump({
                'table_name': ten_bang,
                'columns': schema_info,
                'database': config['database']
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\n‚úÖ ƒê√£ l∆∞u schema v√†o: {schema_path}")
        return schema_info
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return []

def main():
    """
    H√†m ch√≠nh
    """
    print("üöÄ TABLEAU UNIVERSAL DATABASE CONNECTOR")
    print("üéØ K·∫øt n·ªëi Tableau v·ªõi b·∫•t k·ª≥ SQL Server database n√†o")
    print("=" * 60)
    
    # B∆∞·ªõc 1: C·∫•u h√¨nh k·∫øt n·ªëi
    config = tao_config_ket_noi()
    
    # B∆∞·ªõc 2: Li·ªát k√™ b·∫£ng
    bang_list = kiem_tra_bang_trong_database(config)
    
    if not bang_list:
        print("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o trong database")
        return
    
    # B∆∞·ªõc 3: Ch·ªçn b·∫£ng ƒë·ªÉ ph√¢n t√≠ch
    print(f"\nüìä Ch·ªçn b·∫£ng ƒë·ªÉ ph√¢n t√≠ch:")
    for i, ten_bang in enumerate(bang_list, 1):
        print(f"{i}. {ten_bang}")
    
    try:
        chon_bang = int(input(f"Ch·ªçn b·∫£ng (1-{len(bang_list)}): ")) - 1
        ten_bang_chon = bang_list[chon_bang]
        
        # B∆∞·ªõc 4: Ph√¢n t√≠ch b·∫£ng
        schema_info = phan_tich_cau_truc_bang(config, ten_bang_chon)
        
        if schema_info:
            print("\n" + "=" * 60)
            print("‚úÖ HO√ÄN TH√ÄNH C·∫§U H√åNH!")
            print(f"üìä Database: {config['database']}")
            print(f"üìã B·∫£ng: {ten_bang_chon}")
            print(f"üîß C·∫•u h√¨nh: config/database_config.json")
            print(f"üìà Schema: config/schema_{ten_bang_chon}.json")
            print("")
            print("üåê B∆∞·ªõc ti·∫øp theo:")
            print("   1. C·∫≠p nh·∫≠t API ƒë·ªÉ s·ª≠ d·ª•ng c·∫•u h√¨nh m·ªõi")
            print("   2. Ch·∫°y: python tableau_web_data_connector.py")
            print("   3. K·∫øt n·ªëi Tableau t·∫°i: http://127.0.0.1:5002")
        
    except (ValueError, IndexError):
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    main()
