#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
========================================
SCRIPT T·∫†O 3 DATABASE V·ªöI D·ªÆ LI·ªÜU M·∫™U
========================================

M·ª•c ƒë√≠ch: T·∫°o 3 database kh√°c nhau, m·ªói database c√≥ 4-5 b·∫£ng, 
          m·ªói b·∫£ng ch·ª©a kho·∫£ng 500 d√≤ng d·ªØ li·ªáu

Danh s√°ch database:
1. SalesDB - Qu·∫£n l√Ω b√°n h√†ng (5 b·∫£ng)
2. InventoryDB - Qu·∫£n l√Ω kho (4 b·∫£ng)  
3. EmployeeDB - Qu·∫£n l√Ω nh√¢n vi√™n (5 b·∫£ng)
"""

import pymssql
import random
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

# ============================================
# PH·∫¶N 1: C·∫§U H√åNH K·∫æT N·ªêI
# ============================================

CAU_HINH_KET_NOI = {
    'server': '127.0.0.1',
    'port': 1235,
    'user': 'sa',
    'password': 'YourStrong!Pass123'
}

# ============================================
# PH·∫¶N 2: DANH S√ÅCH D·ªÆ LI·ªÜU M·∫™U
# ============================================

# Danh s√°ch t√™n kh√°ch h√†ng
DANH_SACH_TEN = [
    "Nguy·ªÖn VƒÉn", "Tr·∫ßn Th·ªã", "L√™ VƒÉn", "Ph·∫°m Th·ªã", "Ho√†ng VƒÉn",
    "Hu·ª≥nh Th·ªã", "Phan VƒÉn", "V≈© Th·ªã", "ƒê·∫∑ng VƒÉn", "B√πi Th·ªã",
    "ƒê·ªó VƒÉn", "H·ªì Th·ªã", "Ng√¥ VƒÉn", "D∆∞∆°ng Th·ªã", "L√Ω VƒÉn"
]

DANH_SACH_HO = [
    "An", "B√¨nh", "C∆∞·ªùng", "D≈©ng", "Em", "Ph∆∞∆°ng", "Giang", "H√†",
    "Khoa", "Linh", "Minh", "Nam", "Ph√∫c", "Quang", "S∆°n", "T√¢m",
    "Uy√™n", "V√¢n", "Xu√¢n", "Y·∫øn"
]

# Danh s√°ch s·∫£n ph·∫©m
DANH_SACH_SAN_PHAM = [
    "Laptop Dell", "Laptop HP", "Laptop Asus", "Laptop Lenovo",
    "iPhone 15", "iPhone 14", "Samsung Galaxy S24", "Xiaomi Redmi",
    "Chu·ªôt Logitech", "B√†n ph√≠m Corsair", "Tai nghe Sony", "Webcam",
    "M√†n h√¨nh LG", "M√†n h√¨nh Samsung", "SSD Kingston", "RAM Corsair",
    "Case PC", "Ngu·ªìn Cooler Master", "Card ƒë·ªì h·ªça RTX", "Mainboard"
]

# Danh s√°ch ph√≤ng ban
DANH_SACH_PHONG_BAN = [
    "Kinh doanh", "Marketing", "K·∫ø to√°n", "Nh√¢n s·ª±", "IT",
    "V·∫≠n h√†nh", "D·ªãch v·ª• kh√°ch h√†ng", "R&D", "QA", "Legal"
]

# Danh s√°ch ch·ª©c v·ª•
DANH_SACH_CHUC_VU = [
    "Nh√¢n vi√™n", "Tr∆∞·ªüng nh√≥m", "Qu·∫£n l√Ω", "Gi√°m ƒë·ªëc", 
    "Chuy√™n vi√™n", "K·ªπ s∆∞", "Ph√≥ gi√°m ƒë·ªëc"
]

# Danh s√°ch ƒë·ªãa ch·ªâ
DANH_SACH_TINH_THANH = [
    "H√† N·ªôi", "TP.HCM", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°",
    "Bi√™n H√≤a", "V≈©ng T√†u", "Nha Trang", "Hu·∫ø", "Vinh"
]

# ============================================
# PH·∫¶N 3: H√ÄM T·∫†O DATABASE V√Ä B·∫¢NG
# ============================================

def ket_noi_sql_server(database: str = 'master') -> pymssql.Connection:
    """
    K·∫øt n·ªëi t·ªõi SQL Server
    
    Tham s·ªë:
        database: T√™n database c·∫ßn k·∫øt n·ªëi
        
    Tr·∫£ v·ªÅ:
        pymssql.Connection: ƒê·ªëi t∆∞·ª£ng k·∫øt n·ªëi
    """
    return pymssql.connect(
        server=CAU_HINH_KET_NOI['server'],
        port=CAU_HINH_KET_NOI['port'],
        user=CAU_HINH_KET_NOI['user'],
        password=CAU_HINH_KET_NOI['password'],
        database=database
    )

def tao_database(ten_database: str) -> bool:
    """
    T·∫°o database m·ªõi (x√≥a n·∫øu ƒë√£ t·ªìn t·∫°i)
    
    Tham s·ªë:
        ten_database: T√™n database c·∫ßn t·∫°o
        
    Tr·∫£ v·ªÅ:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        ket_noi = ket_noi_sql_server('master')
        ket_noi.autocommit(True)
        con_tro = ket_noi.cursor()
        
        # X√≥a database n·∫øu t·ªìn t·∫°i
        print(f"   üóëÔ∏è X√≥a database '{ten_database}' (n·∫øu t·ªìn t·∫°i)...")
        con_tro.execute(f"""
            IF EXISTS (SELECT name FROM sys.databases WHERE name = '{ten_database}')
            BEGIN
                ALTER DATABASE [{ten_database}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
                DROP DATABASE [{ten_database}];
            END
        """)
        
        # T·∫°o database m·ªõi
        print(f"   ‚ûï T·∫°o database '{ten_database}'...")
        con_tro.execute(f"CREATE DATABASE [{ten_database}]")
        
        ket_noi.close()
        print(f"   ‚úÖ Database '{ten_database}' ƒë√£ ƒë∆∞·ª£c t·∫°o")
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói t·∫°o database '{ten_database}': {e}")
        return False

def tao_bang(ket_noi: pymssql.Connection, cau_lenh_sql: str, ten_bang: str) -> bool:
    """
    T·∫°o b·∫£ng trong database
    
    Tham s·ªë:
        ket_noi: K·∫øt n·ªëi database
        cau_lenh_sql: C√¢u l·ªánh SQL t·∫°o b·∫£ng
        ten_bang: T√™n b·∫£ng
        
    Tr·∫£ v·ªÅ:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        con_tro = ket_noi.cursor()
        con_tro.execute(cau_lenh_sql)
        ket_noi.commit()
        print(f"      ‚úÖ B·∫£ng '{ten_bang}' ƒë√£ ƒë∆∞·ª£c t·∫°o")
        return True
    except Exception as e:
        print(f"      ‚ùå L·ªói t·∫°o b·∫£ng '{ten_bang}': {e}")
        return False

# ============================================
# PH·∫¶N 4: T·∫†O DATABASE 1 - SALESDB (B√ÅN H√ÄNG)
# ============================================

def tao_salesdb():
    """
    T·∫°o database SalesDB v·ªõi 5 b·∫£ng:
    1. Customers (Kh√°ch h√†ng) - 500 d√≤ng
    2. Products (S·∫£n ph·∫©m) - 500 d√≤ng
    3. Orders (ƒê∆°n h√†ng) - 500 d√≤ng
    4. OrderDetails (Chi ti·∫øt ƒë∆°n) - 500 d√≤ng
    5. Payments (Thanh to√°n) - 500 d√≤ng
    """
    print("\n" + "=" * 60)
    print("üìä DATABASE 1: SALESDB (QU·∫¢N L√ù B√ÅN H√ÄNG)")
    print("=" * 60)
    
    # T·∫°o database
    if not tao_database('SalesDB'):
        return False
    
    # K·∫øt n·ªëi t·ªõi database v·ª´a t·∫°o
    ket_noi = ket_noi_sql_server('SalesDB')
    
    # B·∫£ng 1: Customers
    print("\n   üìã T·∫°o b·∫£ng Customers...")
    tao_bang(ket_noi, """
        CREATE TABLE Customers (
            CustomerID INT PRIMARY KEY IDENTITY(1,1),
            FullName NVARCHAR(100) NOT NULL,
            Email NVARCHAR(100),
            Phone NVARCHAR(20),
            Address NVARCHAR(200),
            City NVARCHAR(50),
            CreatedDate DATETIME DEFAULT GETDATE()
        )
    """, "Customers")
    
    # B·∫£ng 2: Products
    print("   üìã T·∫°o b·∫£ng Products...")
    tao_bang(ket_noi, """
        CREATE TABLE Products (
            ProductID INT PRIMARY KEY IDENTITY(1,1),
            ProductName NVARCHAR(100) NOT NULL,
            Category NVARCHAR(50),
            Price DECIMAL(18,2) NOT NULL,
            Stock INT DEFAULT 0,
            Description NVARCHAR(500)
        )
    """, "Products")
    
    # B·∫£ng 3: Orders
    print("   üìã T·∫°o b·∫£ng Orders...")
    tao_bang(ket_noi, """
        CREATE TABLE Orders (
            OrderID INT PRIMARY KEY IDENTITY(1,1),
            CustomerID INT,
            OrderDate DATETIME DEFAULT GETDATE(),
            TotalAmount DECIMAL(18,2),
            Status NVARCHAR(20),
            FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
        )
    """, "Orders")
    
    # B·∫£ng 4: OrderDetails
    print("   üìã T·∫°o b·∫£ng OrderDetails...")
    tao_bang(ket_noi, """
        CREATE TABLE OrderDetails (
            DetailID INT PRIMARY KEY IDENTITY(1,1),
            OrderID INT,
            ProductID INT,
            Quantity INT NOT NULL,
            UnitPrice DECIMAL(18,2) NOT NULL,
            Subtotal DECIMAL(18,2),
            FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
        )
    """, "OrderDetails")
    
    # B·∫£ng 5: Payments
    print("   üìã T·∫°o b·∫£ng Payments...")
    tao_bang(ket_noi, """
        CREATE TABLE Payments (
            PaymentID INT PRIMARY KEY IDENTITY(1,1),
            OrderID INT,
            PaymentDate DATETIME DEFAULT GETDATE(),
            Amount DECIMAL(18,2),
            PaymentMethod NVARCHAR(50),
            Status NVARCHAR(20),
            FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
        )
    """, "Payments")
    
    # Sinh d·ªØ li·ªáu
    print("\n   üîÑ Sinh d·ªØ li·ªáu 500 d√≤ng cho m·ªói b·∫£ng...")
    sinh_du_lieu_salesdb(ket_noi)
    
    ket_noi.close()
    print("\n   ‚úÖ Ho√†n th√†nh SalesDB!")
    return True

def sinh_du_lieu_salesdb(ket_noi: pymssql.Connection):
    """Sinh 500 d√≤ng d·ªØ li·ªáu cho SalesDB"""
    con_tro = ket_noi.cursor()
    
    # 1. Customers (500 d√≤ng)
    print("      üìù Customers (500 d√≤ng)...")
    for i in range(500):
        ten = f"{random.choice(DANH_SACH_TEN)} {random.choice(DANH_SACH_HO)}"
        email = f"{ten.lower().replace(' ', '.')}@email.com"
        phone = f"09{random.randint(10000000, 99999999)}"
        dia_chi = f"{random.randint(1, 500)} ƒê∆∞·ªùng {random.randint(1, 50)}"
        thanh_pho = random.choice(DANH_SACH_TINH_THANH)
        
        con_tro.execute("""
            INSERT INTO Customers (FullName, Email, Phone, Address, City)
            VALUES (%s, %s, %s, %s, %s)
        """, (ten, email, phone, dia_chi, thanh_pho))
    ket_noi.commit()
    
    # 2. Products (500 d√≤ng)
    print("      üìù Products (500 d√≤ng)...")
    danh_muc = ["Laptop", "ƒêi·ªán tho·∫°i", "Ph·ª• ki·ªán", "Linh ki·ªán", "M√†n h√¨nh"]
    for i in range(500):
        ten_sp = f"{random.choice(DANH_SACH_SAN_PHAM)} #{i+1}"
        category = random.choice(danh_muc)
        gia = round(random.uniform(100000, 50000000), 2)
        ton_kho = random.randint(0, 1000)
        
        con_tro.execute("""
            INSERT INTO Products (ProductName, Category, Price, Stock, Description)
            VALUES (%s, %s, %s, %s, %s)
        """, (ten_sp, category, gia, ton_kho, f"M√¥ t·∫£ {ten_sp}"))
    ket_noi.commit()
    
    # 3. Orders (500 d√≤ng)
    print("      üìù Orders (500 d√≤ng)...")
    trang_thai = ["Ch·ªù x·ª≠ l√Ω", "ƒêang giao", "Ho√†n th√†nh", "ƒê√£ h·ªßy"]
    for i in range(500):
        customer_id = random.randint(1, 500)
        ngay_dat = datetime.now() - timedelta(days=random.randint(0, 365))
        tong_tien = round(random.uniform(100000, 10000000), 2)
        status = random.choice(trang_thai)
        
        con_tro.execute("""
            INSERT INTO Orders (CustomerID, OrderDate, TotalAmount, Status)
            VALUES (%s, %s, %s, %s)
        """, (customer_id, ngay_dat, tong_tien, status))
    ket_noi.commit()
    
    # 4. OrderDetails (500 d√≤ng)
    print("      üìù OrderDetails (500 d√≤ng)...")
    for i in range(500):
        order_id = random.randint(1, 500)
        product_id = random.randint(1, 500)
        so_luong = random.randint(1, 10)
        don_gia = round(random.uniform(100000, 5000000), 2)
        thanh_tien = round(so_luong * don_gia, 2)
        
        con_tro.execute("""
            INSERT INTO OrderDetails (OrderID, ProductID, Quantity, UnitPrice, Subtotal)
            VALUES (%s, %s, %s, %s, %s)
        """, (order_id, product_id, so_luong, don_gia, thanh_tien))
    ket_noi.commit()
    
    # 5. Payments (500 d√≤ng)
    print("      üìù Payments (500 d√≤ng)...")
    phuong_thuc = ["Ti·ªÅn m·∫∑t", "Chuy·ªÉn kho·∫£n", "Th·∫ª t√≠n d·ª•ng", "V√≠ ƒëi·ªán t·ª≠"]
    for i in range(500):
        order_id = random.randint(1, 500)
        ngay_tt = datetime.now() - timedelta(days=random.randint(0, 365))
        so_tien = round(random.uniform(100000, 10000000), 2)
        pt_tt = random.choice(phuong_thuc)
        status = random.choice(["Th√†nh c√¥ng", "Th·∫•t b·∫°i", "Ch·ªù x√°c nh·∫≠n"])
        
        con_tro.execute("""
            INSERT INTO Payments (OrderID, PaymentDate, Amount, PaymentMethod, Status)
            VALUES (%s, %s, %s, %s, %s)
        """, (order_id, ngay_tt, so_tien, pt_tt, status))
    ket_noi.commit()

# ============================================
# PH·∫¶N 5: T·∫†O DATABASE 2 - INVENTORYDB (KHO)
# ============================================

def tao_inventorydb():
    """
    T·∫°o database InventoryDB v·ªõi 4 b·∫£ng:
    1. Warehouses (Kho) - 500 d√≤ng
    2. Items (M·∫∑t h√†ng) - 500 d√≤ng
    3. StockMovements (Xu·∫•t nh·∫≠p kho) - 500 d√≤ng
    4. Suppliers (Nh√† cung c·∫•p) - 500 d√≤ng
    """
    print("\n" + "=" * 60)
    print("üì¶ DATABASE 2: INVENTORYDB (QU·∫¢N L√ù KHO)")
    print("=" * 60)
    
    if not tao_database('InventoryDB'):
        return False
    
    ket_noi = ket_noi_sql_server('InventoryDB')
    
    # B·∫£ng 1: Warehouses
    print("\n   üìã T·∫°o b·∫£ng Warehouses...")
    tao_bang(ket_noi, """
        CREATE TABLE Warehouses (
            WarehouseID INT PRIMARY KEY IDENTITY(1,1),
            WarehouseName NVARCHAR(100) NOT NULL,
            Location NVARCHAR(200),
            City NVARCHAR(50),
            Capacity INT,
            ManagerName NVARCHAR(100)
        )
    """, "Warehouses")
    
    # B·∫£ng 2: Items
    print("   üìã T·∫°o b·∫£ng Items...")
    tao_bang(ket_noi, """
        CREATE TABLE Items (
            ItemID INT PRIMARY KEY IDENTITY(1,1),
            ItemCode NVARCHAR(50) NOT NULL,
            ItemName NVARCHAR(100) NOT NULL,
            Category NVARCHAR(50),
            Unit NVARCHAR(20),
            MinStock INT DEFAULT 0,
            CurrentStock INT DEFAULT 0
        )
    """, "Items")
    
    # B·∫£ng 3: StockMovements
    print("   üìã T·∫°o b·∫£ng StockMovements...")
    tao_bang(ket_noi, """
        CREATE TABLE StockMovements (
            MovementID INT PRIMARY KEY IDENTITY(1,1),
            ItemID INT,
            WarehouseID INT,
            MovementType NVARCHAR(20),
            Quantity INT NOT NULL,
            MovementDate DATETIME DEFAULT GETDATE(),
            Notes NVARCHAR(500),
            FOREIGN KEY (ItemID) REFERENCES Items(ItemID),
            FOREIGN KEY (WarehouseID) REFERENCES Warehouses(WarehouseID)
        )
    """, "StockMovements")
    
    # B·∫£ng 4: Suppliers
    print("   üìã T·∫°o b·∫£ng Suppliers...")
    tao_bang(ket_noi, """
        CREATE TABLE Suppliers (
            SupplierID INT PRIMARY KEY IDENTITY(1,1),
            SupplierName NVARCHAR(100) NOT NULL,
            ContactPerson NVARCHAR(100),
            Phone NVARCHAR(20),
            Email NVARCHAR(100),
            Address NVARCHAR(200),
            Rating DECIMAL(3,2)
        )
    """, "Suppliers")
    
    # Sinh d·ªØ li·ªáu
    print("\n   üîÑ Sinh d·ªØ li·ªáu 500 d√≤ng cho m·ªói b·∫£ng...")
    sinh_du_lieu_inventorydb(ket_noi)
    
    ket_noi.close()
    print("\n   ‚úÖ Ho√†n th√†nh InventoryDB!")
    return True

def sinh_du_lieu_inventorydb(ket_noi: pymssql.Connection):
    """Sinh 500 d√≤ng d·ªØ li·ªáu cho InventoryDB"""
    con_tro = ket_noi.cursor()
    
    # 1. Warehouses (500 d√≤ng)
    print("      üìù Warehouses (500 d√≤ng)...")
    for i in range(500):
        ten_kho = f"Kho {chr(65 + (i % 26))}{i+1}"
        dia_diem = f"{random.randint(1, 500)} KCN {random.choice(['A', 'B', 'C'])}"
        thanh_pho = random.choice(DANH_SACH_TINH_THANH)
        suc_chua = random.randint(1000, 100000)
        quan_ly = f"{random.choice(DANH_SACH_TEN)} {random.choice(DANH_SACH_HO)}"
        
        con_tro.execute("""
            INSERT INTO Warehouses (WarehouseName, Location, City, Capacity, ManagerName)
            VALUES (%s, %s, %s, %s, %s)
        """, (ten_kho, dia_diem, thanh_pho, suc_chua, quan_ly))
    ket_noi.commit()
    
    # 2. Items (500 d√≤ng)
    print("      üìù Items (500 d√≤ng)...")
    danh_muc = ["Nguy√™n li·ªáu", "Th√†nh ph·∫©m", "B√°n th√†nh ph·∫©m", "Ph·ª• ki·ªán", "C√¥ng c·ª•"]
    don_vi = ["C√°i", "H·ªôp", "Th√πng", "Kg", "M√©t"]
    for i in range(500):
        ma_hang = f"ITEM{i+1:04d}"
        ten_hang = f"M·∫∑t h√†ng {random.choice(['A', 'B', 'C', 'D'])} {i+1}"
        loai = random.choice(danh_muc)
        dv = random.choice(don_vi)
        ton_toi_thieu = random.randint(10, 100)
        ton_hien_tai = random.randint(0, 1000)
        
        con_tro.execute("""
            INSERT INTO Items (ItemCode, ItemName, Category, Unit, MinStock, CurrentStock)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (ma_hang, ten_hang, loai, dv, ton_toi_thieu, ton_hien_tai))
    ket_noi.commit()
    
    # 3. StockMovements (500 d√≤ng)
    print("      üìù StockMovements (500 d√≤ng)...")
    loai_gd = ["Nh·∫≠p kho", "Xu·∫•t kho", "Chuy·ªÉn kho", "ƒêi·ªÅu ch·ªânh"]
    for i in range(500):
        item_id = random.randint(1, 500)
        warehouse_id = random.randint(1, 500)
        loai = random.choice(loai_gd)
        so_luong = random.randint(1, 500)
        ngay_gd = datetime.now() - timedelta(days=random.randint(0, 365))
        ghi_chu = f"Giao d·ªãch {loai} #{i+1}"
        
        con_tro.execute("""
            INSERT INTO StockMovements (ItemID, WarehouseID, MovementType, Quantity, MovementDate, Notes)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (item_id, warehouse_id, loai, so_luong, ngay_gd, ghi_chu))
    ket_noi.commit()
    
    # 4. Suppliers (500 d√≤ng)
    print("      üìù Suppliers (500 d√≤ng)...")
    for i in range(500):
        ten_ncc = f"C√¥ng ty {random.choice(['TNHH', 'CP', 'MTV'])} {random.choice(DANH_SACH_HO)} {i+1}"
        nguoi_lh = f"{random.choice(DANH_SACH_TEN)} {random.choice(DANH_SACH_HO)}"
        phone = f"02{random.randint(10000000, 99999999)}"
        email = f"contact{i+1}@company.com"
        dia_chi = f"{random.randint(1, 500)} ƒê∆∞·ªùng {random.randint(1, 50)}, {random.choice(DANH_SACH_TINH_THANH)}"
        danh_gia = round(random.uniform(3.0, 5.0), 2)
        
        con_tro.execute("""
            INSERT INTO Suppliers (SupplierName, ContactPerson, Phone, Email, Address, Rating)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (ten_ncc, nguoi_lh, phone, email, dia_chi, danh_gia))
    ket_noi.commit()

# ============================================
# PH·∫¶N 6: T·∫†O DATABASE 3 - EMPLOYEEDB (NH√ÇN VI√äN)
# ============================================

def tao_employeedb():
    """
    T·∫°o database EmployeeDB v·ªõi 5 b·∫£ng:
    1. Employees (Nh√¢n vi√™n) - 500 d√≤ng
    2. Departments (Ph√≤ng ban) - 500 d√≤ng
    3. Salaries (L∆∞∆°ng) - 500 d√≤ng
    4. Attendance (Ch·∫•m c√¥ng) - 500 d√≤ng
    5. Benefits (Ph√∫c l·ª£i) - 500 d√≤ng
    """
    print("\n" + "=" * 60)
    print("üë• DATABASE 3: EMPLOYEEDB (QU·∫¢N L√ù NH√ÇN VI√äN)")
    print("=" * 60)
    
    if not tao_database('EmployeeDB'):
        return False
    
    ket_noi = ket_noi_sql_server('EmployeeDB')
    
    # B·∫£ng 1: Employees
    print("\n   üìã T·∫°o b·∫£ng Employees...")
    tao_bang(ket_noi, """
        CREATE TABLE Employees (
            EmployeeID INT PRIMARY KEY IDENTITY(1,1),
            EmployeeCode NVARCHAR(20) NOT NULL,
            FullName NVARCHAR(100) NOT NULL,
            BirthDate DATE,
            Gender NVARCHAR(10),
            Phone NVARCHAR(20),
            Email NVARCHAR(100),
            Position NVARCHAR(50),
            HireDate DATE,
            Status NVARCHAR(20)
        )
    """, "Employees")
    
    # B·∫£ng 2: Departments
    print("   üìã T·∫°o b·∫£ng Departments...")
    tao_bang(ket_noi, """
        CREATE TABLE Departments (
            DepartmentID INT PRIMARY KEY IDENTITY(1,1),
            DepartmentName NVARCHAR(100) NOT NULL,
            ManagerID INT,
            Location NVARCHAR(100),
            Budget DECIMAL(18,2),
            EmployeeCount INT DEFAULT 0
        )
    """, "Departments")
    
    # B·∫£ng 3: Salaries
    print("   üìã T·∫°o b·∫£ng Salaries...")
    tao_bang(ket_noi, """
        CREATE TABLE Salaries (
            SalaryID INT PRIMARY KEY IDENTITY(1,1),
            EmployeeID INT,
            BaseSalary DECIMAL(18,2) NOT NULL,
            Bonus DECIMAL(18,2) DEFAULT 0,
            Deductions DECIMAL(18,2) DEFAULT 0,
            NetSalary DECIMAL(18,2),
            PaymentDate DATE,
            FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
        )
    """, "Salaries")
    
    # B·∫£ng 4: Attendance
    print("   üìã T·∫°o b·∫£ng Attendance...")
    tao_bang(ket_noi, """
        CREATE TABLE Attendance (
            AttendanceID INT PRIMARY KEY IDENTITY(1,1),
            EmployeeID INT,
            WorkDate DATE NOT NULL,
            CheckIn TIME,
            CheckOut TIME,
            WorkHours DECIMAL(5,2),
            Status NVARCHAR(20),
            FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
        )
    """, "Attendance")
    
    # B·∫£ng 5: Benefits
    print("   üìã T·∫°o b·∫£ng Benefits...")
    tao_bang(ket_noi, """
        CREATE TABLE Benefits (
            BenefitID INT PRIMARY KEY IDENTITY(1,1),
            EmployeeID INT,
            BenefitType NVARCHAR(50) NOT NULL,
            Amount DECIMAL(18,2),
            StartDate DATE,
            EndDate DATE,
            Status NVARCHAR(20),
            FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
        )
    """, "Benefits")
    
    # Sinh d·ªØ li·ªáu
    print("\n   üîÑ Sinh d·ªØ li·ªáu 500 d√≤ng cho m·ªói b·∫£ng...")
    sinh_du_lieu_employeedb(ket_noi)
    
    ket_noi.close()
    print("\n   ‚úÖ Ho√†n th√†nh EmployeeDB!")
    return True

def sinh_du_lieu_employeedb(ket_noi: pymssql.Connection):
    """Sinh 500 d√≤ng d·ªØ li·ªáu cho EmployeeDB"""
    con_tro = ket_noi.cursor()
    
    # 1. Employees (500 d√≤ng)
    print("      üìù Employees (500 d√≤ng)...")
    gioi_tinh = ["Nam", "N·ªØ"]
    trang_thai = ["ƒêang l√†m", "Ngh·ªâ vi·ªác", "T·∫°m ngh·ªâ"]
    for i in range(500):
        ma_nv = f"NV{i+1:04d}"
        ten = f"{random.choice(DANH_SACH_TEN)} {random.choice(DANH_SACH_HO)}"
        ngay_sinh = datetime.now() - timedelta(days=random.randint(7300, 18250))  # 20-50 tu·ªïi
        gt = random.choice(gioi_tinh)
        phone = f"09{random.randint(10000000, 99999999)}"
        email = f"{ma_nv.lower()}@company.com"
        chuc_vu = random.choice(DANH_SACH_CHUC_VU)
        ngay_vao = datetime.now() - timedelta(days=random.randint(0, 3650))
        tt = random.choice(trang_thai)
        
        con_tro.execute("""
            INSERT INTO Employees (EmployeeCode, FullName, BirthDate, Gender, Phone, Email, Position, HireDate, Status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (ma_nv, ten, ngay_sinh, gt, phone, email, chuc_vu, ngay_vao, tt))
    ket_noi.commit()
    
    # 2. Departments (500 d√≤ng)
    print("      üìù Departments (500 d√≤ng)...")
    for i in range(500):
        ten_pb = f"Ph√≤ng {random.choice(DANH_SACH_PHONG_BAN)} {i+1}"
        manager = random.randint(1, 500)
        vi_tri = f"T·∫ßng {random.randint(1, 20)}, T√≤a nh√† {random.choice(['A', 'B', 'C'])}"
        ngan_sach = round(random.uniform(100000000, 1000000000), 2)
        so_nv = random.randint(5, 50)
        
        con_tro.execute("""
            INSERT INTO Departments (DepartmentName, ManagerID, Location, Budget, EmployeeCount)
            VALUES (%s, %s, %s, %s, %s)
        """, (ten_pb, manager, vi_tri, ngan_sach, so_nv))
    ket_noi.commit()
    
    # 3. Salaries (500 d√≤ng)
    print("      üìù Salaries (500 d√≤ng)...")
    for i in range(500):
        emp_id = random.randint(1, 500)
        luong_co_ban = round(random.uniform(5000000, 50000000), 2)
        thuong = round(random.uniform(0, 10000000), 2)
        khau_tru = round(random.uniform(0, 2000000), 2)
        luong_thuc = round(luong_co_ban + thuong - khau_tru, 2)
        ngay_tt = datetime.now() - timedelta(days=random.randint(0, 365))
        
        con_tro.execute("""
            INSERT INTO Salaries (EmployeeID, BaseSalary, Bonus, Deductions, NetSalary, PaymentDate)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (emp_id, luong_co_ban, thuong, khau_tru, luong_thuc, ngay_tt))
    ket_noi.commit()
    
    # 4. Attendance (500 d√≤ng)
    print("      üìù Attendance (500 d√≤ng)...")
    trang_thai_cc = ["ƒê√∫ng gi·ªù", "ƒêi mu·ªôn", "V·ªÅ s·ªõm", "Ngh·ªâ c√≥ ph√©p", "Ngh·ªâ kh√¥ng ph√©p"]
    for i in range(500):
        emp_id = random.randint(1, 500)
        ngay_lam = datetime.now() - timedelta(days=random.randint(0, 365))
        gio_vao = f"{random.randint(7, 9):02d}:{random.randint(0, 59):02d}:00"
        gio_ra = f"{random.randint(17, 19):02d}:{random.randint(0, 59):02d}:00"
        gio_lam = round(random.uniform(6, 10), 2)
        tt_cc = random.choice(trang_thai_cc)
        
        con_tro.execute("""
            INSERT INTO Attendance (EmployeeID, WorkDate, CheckIn, CheckOut, WorkHours, Status)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (emp_id, ngay_lam, gio_vao, gio_ra, gio_lam, tt_cc))
    ket_noi.commit()
    
    # 5. Benefits (500 d√≤ng)
    print("      üìù Benefits (500 d√≤ng)...")
    loai_pl = ["B·∫£o hi·ªÉm y t·∫ø", "B·∫£o hi·ªÉm x√£ h·ªôi", "Th∆∞·ªüng", "Tr·ª£ c·∫•p", "Du l·ªãch"]
    for i in range(500):
        emp_id = random.randint(1, 500)
        loai = random.choice(loai_pl)
        so_tien = round(random.uniform(500000, 10000000), 2)
        ngay_bd = datetime.now() - timedelta(days=random.randint(0, 365))
        ngay_kt = ngay_bd + timedelta(days=random.randint(30, 365))
        tt = random.choice(["ƒêang √°p d·ª•ng", "H·∫øt h·∫°n", "Ch·ªù duy·ªát"])
        
        con_tro.execute("""
            INSERT INTO Benefits (EmployeeID, BenefitType, Amount, StartDate, EndDate, Status)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (emp_id, loai, so_tien, ngay_bd, ngay_kt, tt))
    ket_noi.commit()

# ============================================
# PH·∫¶N 7: H√ÄM CH√çNH
# ============================================

def main():
    """
    H√†m ch√≠nh - T·∫°o 3 database v·ªõi d·ªØ li·ªáu m·∫´u
    """
    print("=" * 60)
    print("üöÄ T·∫†O 3 DATABASE V·ªöI D·ªÆ LI·ªÜU M·∫™U")
    print("=" * 60)
    print(f"üìÖ Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üéØ M·ª•c ti√™u:")
    print(f"   ‚Ä¢ 3 database kh√°c nhau")
    print(f"   ‚Ä¢ M·ªói database c√≥ 4-5 b·∫£ng")
    print(f"   ‚Ä¢ M·ªói b·∫£ng c√≥ kho·∫£ng 500 d√≤ng d·ªØ li·ªáu")
    print("")
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    print("üîç Ki·ªÉm tra k·∫øt n·ªëi SQL Server...")
    try:
        ket_noi_test = ket_noi_sql_server('master')
        ket_noi_test.close()
        print("   ‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!")
    except Exception as e:
        print(f"   ‚ùå L·ªói k·∫øt n·ªëi: {e}")
        print("\nüí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
        print("   1. Ki·ªÉm tra Docker ƒëang ch·∫°y: docker ps")
        print("   2. Start SQL Server: cd config && docker compose up -d")
        print("   3. Ki·ªÉm tra port 1235: netstat -an | grep 1235")
        return
    
    # X√°c nh·∫≠n
    xac_nhan = input("\n‚ö†Ô∏è Script s·∫Ω X√ìA v√† T·∫†O L·∫†I 3 database. Ti·∫øp t·ª•c? (y/N): ").lower()
    if xac_nhan != 'y':
        print("‚ùå ƒê√£ h·ªßy!")
        return
    
    # T·∫°o t·ª´ng database
    thanh_cong = 0
    
    if tao_salesdb():
        thanh_cong += 1
    
    if tao_inventorydb():
        thanh_cong += 1
    
    if tao_employeedb():
        thanh_cong += 1
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print(f"üìä K·∫æT QU·∫¢: ƒê√£ t·∫°o {thanh_cong}/3 database th√†nh c√¥ng!")
    print("=" * 60)
    
    if thanh_cong == 3:
        print("\nüéâ HO√ÄN TH√ÄNH!")
        print("\nüìã Danh s√°ch database:")
        print("   1. SalesDB - 5 b·∫£ng, ~2500 d√≤ng")
        print("   2. InventoryDB - 4 b·∫£ng, ~2000 d√≤ng")
        print("   3. EmployeeDB - 5 b·∫£ng, ~2500 d√≤ng")
        print("\nüß™ Ki·ªÉm tra:")
        print("   python tests/test_hieu_suat_du_lieu_lon.py")
        print("\nüöÄ Ch·∫°y server:")
        print("   python src/tableau_universal_connector.py")
    else:
        print("\n‚ö†Ô∏è M·ªôt s·ªë database t·∫°o th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
