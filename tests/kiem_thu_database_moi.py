#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ki·ªÉm th·ª≠ kh·∫£ nƒÉng l√†m vi·ªác v·ªõi database m·ªõi v√† c·∫≠p nh·∫≠t real-time
D·ª± √°n t·ªët nghi·ªáp - Tableau Universal Database Connector

Test 2 t√¨nh hu·ªëng:
1. T·∫°o database m·ªõi v√† k·∫øt n·ªëi
2. C·∫≠p nh·∫≠t d·ªØ li·ªáu v√† xem real-time trong Tableau
"""

import json
import os
import sys
import pymssql
from datetime import datetime, timedelta
import random
import time

def tao_database_test_moi():
    """
    T·∫°o m·ªôt database m·ªõi ƒë·ªÉ test
    """
    print("üóÑÔ∏è KI·ªÇM TH·ª¨: T·∫†O DATABASE M·ªöI")
    print("=" * 50)
    
    ten_database_moi = "TestDatabase_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    
    try:
        # K·∫øt n·ªëi master ƒë·ªÉ t·∫°o database m·ªõi
        ket_noi_master = pymssql.connect(
            server='127.0.0.1',
            port=1235,
            user='sa',
            password='YourStrong!Pass123',
            database='master'
        )
        
        con_tro = ket_noi_master.cursor()
        
        # T·∫°o database m·ªõi
        print(f"üìä ƒêang t·∫°o database: {ten_database_moi}")
        con_tro.execute(f"CREATE DATABASE [{ten_database_moi}]")
        ket_noi_master.commit()
        ket_noi_master.close()
        
        print(f"‚úÖ T·∫°o database {ten_database_moi} th√†nh c√¥ng!")
        
        # K·∫øt n·ªëi database m·ªõi v√† t·∫°o b·∫£ng test
        ket_noi_moi = pymssql.connect(
            server='127.0.0.1',
            port=1235,
            user='sa',
            password='YourStrong!Pass123',
            database=ten_database_moi
        )
        
        con_tro_moi = ket_noi_moi.cursor()
        
        # T·∫°o b·∫£ng s·∫£n ph·∫©m
        print("üìã ƒêang t·∫°o b·∫£ng: bang_san_pham")
        con_tro_moi.execute("""
        CREATE TABLE bang_san_pham (
            id_san_pham INT IDENTITY(1,1) PRIMARY KEY,
            ten_san_pham NVARCHAR(100) NOT NULL,
            gia_ban DECIMAL(10,2) NOT NULL,
            so_luong_ton INT NOT NULL,
            ngay_nhap DATETIME DEFAULT GETDATE(),
            danh_muc NVARCHAR(50),
            ghi_chu NVARCHAR(255)
        )
        """)
        
        # Th√™m d·ªØ li·ªáu m·∫´u
        print("üìä ƒêang th√™m d·ªØ li·ªáu m·∫´u...")
        danh_sach_san_pham = [
            ('Laptop Dell XPS 13', 25000000, 15, 'M√°y t√≠nh', 'Laptop cao c·∫•p'),
            ('iPhone 15 Pro', 30000000, 20, 'ƒêi·ªán tho·∫°i', 'ƒêi·ªán tho·∫°i Apple m·ªõi nh·∫•t'),
            ('Samsung Galaxy S24', 22000000, 25, 'ƒêi·ªán tho·∫°i', 'ƒêi·ªán tho·∫°i Samsung flagship'),
            ('MacBook Air M2', 28000000, 10, 'M√°y t√≠nh', 'Laptop Apple'),
            ('iPad Pro 12.9', 35000000, 12, 'M√°y t√≠nh b·∫£ng', 'M√°y t√≠nh b·∫£ng cao c·∫•p'),
            ('AirPods Pro', 6000000, 50, 'Tai nghe', 'Tai nghe kh√¥ng d√¢y Apple'),
            ('Sony WH-1000XM5', 8000000, 30, 'Tai nghe', 'Tai nghe ch·ªëng ·ªìn Sony'),
            ('Apple Watch Series 9', 12000000, 18, 'ƒê·ªìng h·ªì th√¥ng minh', 'ƒê·ªìng h·ªì th√¥ng minh Apple'),
            ('Gaming Chair', 5000000, 8, 'Gh·∫ø gaming', 'Gh·∫ø ch∆°i game cao c·∫•p'),
            ('Monitor 4K Dell', 15000000, 6, 'M√†n h√¨nh', 'M√†n h√¨nh 4K chuy√™n nghi·ªáp')
        ]
        
        for san_pham in danh_sach_san_pham:
            con_tro_moi.execute("""
            INSERT INTO bang_san_pham (ten_san_pham, gia_ban, so_luong_ton, danh_muc, ghi_chu)
            VALUES (%s, %s, %s, %s, %s)
            """, san_pham)
        
        ket_noi_moi.commit()
        
        # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ th√™m
        con_tro_moi.execute("SELECT COUNT(*) FROM bang_san_pham")
        so_dong = con_tro_moi.fetchone()[0]
        print(f"‚úÖ ƒê√£ th√™m {so_dong} s·∫£n ph·∫©m v√†o database")
        
        ket_noi_moi.close()
        
        return ten_database_moi
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o database m·ªõi: {e}")
        return None

def cap_nhat_config_database(ten_database_moi):
    """
    C·∫≠p nh·∫≠t file config ƒë·ªÉ tr·ªè ƒë·∫øn database m·ªõi
    """
    print(f"\nüîß KI·ªÇM TH·ª¨: C·∫¨P NH·∫¨T C·∫§U H√åNH DATABASE")
    print("=" * 50)
    
    try:
        # Backup config c≈©
        config_path = "config/database_config.json"
        backup_path = "config/database_config_backup.json"
        
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config_cu = json.load(f)
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(config_cu, f, indent=2, ensure_ascii=False)
            print(f"üíæ ƒê√£ backup config c≈© v√†o: {backup_path}")
        
        # T·∫°o config m·ªõi
        config_moi = {
            "server": "127.0.0.1",
            "port": 1235,
            "user": "sa",
            "password": "YourStrong!Pass123",
            "database": ten_database_moi
        }
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config_moi, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t config ƒë·ªÉ s·ª≠ d·ª•ng database: {ten_database_moi}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t config: {e}")
        return False

def test_universal_connector_voi_database_moi(ten_database_moi):
    """
    Test xem Universal Connector c√≥ ho·∫°t ƒë·ªông v·ªõi database m·ªõi kh√¥ng
    """
    print(f"\nüåê KI·ªÇM TH·ª¨: UNIVERSAL CONNECTOR V·ªöI DATABASE M·ªöI")
    print("=" * 50)
    
    try:
        # Import Universal Connector
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
        from tableau_universal_connector import app, lay_danh_sach_bang, doc_schema_bang
        
        # Test 1: L·∫•y danh s√°ch b·∫£ng
        print("üìã Test 1: L·∫•y danh s√°ch b·∫£ng")
        bang_list = lay_danh_sach_bang()
        print(f"   ‚úÖ T√¨m th·∫•y {len(bang_list)} b·∫£ng: {bang_list}")
        
        # Test 2: L·∫•y schema c·ªßa b·∫£ng
        print("\nüìä Test 2: Ph√°t hi·ªán schema t·ª± ƒë·ªông")
        if 'bang_san_pham' in bang_list:
            schema = doc_schema_bang('bang_san_pham')
            if schema:
                print(f"   ‚úÖ Schema b·∫£ng bang_san_pham:")
                for cot in schema['columns']:
                    print(f"      - {cot['column_name']}: {cot['sql_type']} ‚Üí {cot['tableau_type']}")
            else:
                print("   ‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c schema")
                return False
        
        # Test 3: Test API endpoints
        print("\nüåê Test 3: API endpoints")
        with app.test_client() as client:
            # Test database info
            response = client.get('/api/database-info')
            if response.status_code == 200:
                data = response.get_json()
                if data['success']:
                    print(f"   ‚úÖ Database info: {data['database']} ({data['table_count']} b·∫£ng)")
                else:
                    print(f"   ‚ùå API l·ªói: {data.get('error')}")
                    return False
            
            # Test tables list
            response = client.get('/api/tables')
            if response.status_code == 200:
                data = response.get_json()
                if data['success']:
                    print(f"   ‚úÖ Tables API: {len(data['tables'])} b·∫£ng")
                else:
                    print(f"   ‚ùå Tables API l·ªói: {data.get('error')}")
                    return False
            
            # Test data API
            response = client.get('/api/data/bang_san_pham?limit=5')
            if response.status_code == 200:
                data = response.get_json()
                if data['success']:
                    print(f"   ‚úÖ Data API: {data['count']} d√≤ng d·ªØ li·ªáu")
                    print(f"      Query: {data.get('query', 'N/A')}")
                else:
                    print(f"   ‚ùå Data API l·ªói: {data.get('error')}")
                    return False
        
        print(f"\nüéâ UNIVERSAL CONNECTOR HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O V·ªöI DATABASE M·ªöI!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test Universal Connector: {e}")
        return False

def test_cap_nhat_real_time():
    """
    Test kh·∫£ nƒÉng c·∫≠p nh·∫≠t d·ªØ li·ªáu real-time
    """
    print(f"\n‚ö° KI·ªÇM TH·ª¨: C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU REAL-TIME")
    print("=" * 50)
    
    try:
        # ƒê·ªçc config hi·ªán t·∫°i
        with open("config/database_config.json", 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # K·∫øt n·ªëi database
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        
        # L·∫•y s·ªë l∆∞·ª£ng d√≤ng ban ƒë·∫ßu
        con_tro.execute("SELECT COUNT(*) FROM bang_san_pham")
        so_dong_ban_dau = con_tro.fetchone()[0]
        print(f"üìä S·ªë d√≤ng ban ƒë·∫ßu: {so_dong_ban_dau}")
        
        # Th√™m d·ªØ li·ªáu m·ªõi
        print("‚è≥ ƒêang th√™m d·ªØ li·ªáu m·ªõi...")
        san_pham_moi = [
            (f'S·∫£n ph·∫©m m·ªõi {datetime.now().strftime("%H:%M:%S")}', 
             random.randint(1000000, 50000000), 
             random.randint(1, 100), 
             'H√†ng m·ªõi', 
             'ƒê∆∞·ª£c th√™m trong test real-time'),
            (f'Gadget {datetime.now().strftime("%H:%M:%S")}', 
             random.randint(500000, 20000000), 
             random.randint(5, 50), 
             'Ph·ª• ki·ªán', 
             'Test c·∫≠p nh·∫≠t real-time')
        ]
        
        for sp in san_pham_moi:
            con_tro.execute("""
            INSERT INTO bang_san_pham (ten_san_pham, gia_ban, so_luong_ton, danh_muc, ghi_chu)
            VALUES (%s, %s, %s, %s, %s)
            """, sp)
        
        ket_noi.commit()
        
        # Ki·ªÉm tra d·ªØ li·ªáu m·ªõi
        con_tro.execute("SELECT COUNT(*) FROM bang_san_pham")
        so_dong_moi = con_tro.fetchone()[0]
        print(f"‚úÖ ƒê√£ th√™m {so_dong_moi - so_dong_ban_dau} d√≤ng m·ªõi")
        print(f"üìä T·ªïng s·ªë d√≤ng hi·ªán t·∫°i: {so_dong_moi}")
        
        # Test API v·ªõi d·ªØ li·ªáu m·ªõi
        print("\nüåê Test API v·ªõi d·ªØ li·ªáu m·ªõi:")
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
        from tableau_universal_connector import app
        
        with app.test_client() as client:
            response = client.get('/api/data/bang_san_pham?limit=0&order=auto')
            if response.status_code == 200:
                data = response.get_json()
                if data['success']:
                    print(f"   ‚úÖ API tr·∫£ v·ªÅ {data['count']} d√≤ng (bao g·ªìm d·ªØ li·ªáu m·ªõi)")
                    print(f"   ‚è∞ Timestamp: {data.get('timestamp')}")
                    
                    # Hi·ªÉn th·ªã 3 d√≤ng cu·ªëi (d·ªØ li·ªáu m·ªõi nh·∫•t)
                    print("   üìä 3 d√≤ng d·ªØ li·ªáu m·ªõi nh·∫•t:")
                    for i, dong in enumerate(data['data'][-3:], 1):
                        print(f"      {i}. {dong.get('ten_san_pham', 'N/A')} - {dong.get('gia_ban', 0):,}ƒë")
                else:
                    print(f"   ‚ùå API l·ªói: {data.get('error')}")
                    return False
        
        # C·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m ƒë·ªÉ test real-time
        print("\nüí∞ Test c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m:")
        con_tro.execute("UPDATE bang_san_pham SET gia_ban = gia_ban * 1.1 WHERE id_san_pham <= 3")
        ket_noi.commit()
        print("   ‚úÖ ƒê√£ tƒÉng gi√° 10% cho 3 s·∫£n ph·∫©m ƒë·∫ßu ti√™n")
        
        # Ki·ªÉm tra c·∫≠p nh·∫≠t trong API
        with app.test_client() as client:
            response = client.get('/api/data/bang_san_pham?limit=3&order=auto')
            if response.status_code == 200:
                data = response.get_json()
                if data['success']:
                    print("   üìä Gi√° s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t:")
                    for dong in data['data']:
                        print(f"      - {dong.get('ten_san_pham', 'N/A')}: {dong.get('gia_ban', 0):,.0f}ƒë")
        
        ket_noi.close()
        
        print(f"\nüéâ D·ªÆ LI·ªÜU C·∫¨P NH·∫¨T REAL-TIME HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!")
        print("üí° Trong Tableau Public:")
        print("   - D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói khi refresh connection")
        print("   - Tableau s·∫Ω g·ªçi API m·ªõi v√† l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ database")
        print("   - Kh√¥ng c·∫ßn restart server hay thay ƒë·ªïi c·∫•u h√¨nh")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test real-time: {e}")
        return False

def khoi_phuc_config_cu():
    """
    Kh√¥i ph·ª•c config database c≈©
    """
    print(f"\nüîÑ KH√îI PH·ª§C C·∫§U H√åNH C≈®")
    print("=" * 50)
    
    try:
        backup_path = "config/database_config_backup.json"
        config_path = "config/database_config.json"
        
        if os.path.exists(backup_path):
            with open(backup_path, 'r', encoding='utf-8') as f:
                config_cu = json.load(f)
            
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config_cu, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ ƒê√£ kh√¥i ph·ª•c config c≈©: {config_cu['database']}")
            return True
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file backup config")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥i ph·ª•c config: {e}")
        return False

def main():
    """
    H√†m ch√≠nh - th·ª±c hi·ªán to√†n b·ªô test
    """
    print("üß™ KI·ªÇM TH·ª¨ TO√ÄN DI·ªÜN: DATABASE M·ªöI & REAL-TIME")
    print("=" * 60)
    print("üìã S·∫Ω ki·ªÉm th·ª≠:")
    print("  1Ô∏è‚É£ T·∫°o database m·ªõi v√† k·∫øt n·ªëi")
    print("  2Ô∏è‚É£ Universal Connector ho·∫°t ƒë·ªông v·ªõi database m·ªõi")
    print("  3Ô∏è‚É£ C·∫≠p nh·∫≠t d·ªØ li·ªáu real-time")
    print("  4Ô∏è‚É£ Kh√¥i ph·ª•c c·∫•u h√¨nh c≈©")
    print("")
    
    ket_qua_test = {
        'database_moi': False,
        'universal_connector': False,
        'real_time': False,
        'khoi_phuc': False
    }
    
    # Test 1: T·∫°o database m·ªõi
    ten_database_moi = tao_database_test_moi()
    if ten_database_moi:
        ket_qua_test['database_moi'] = True
        
        # C·∫≠p nh·∫≠t config
        if cap_nhat_config_database(ten_database_moi):
            
            # Test 2: Universal Connector
            if test_universal_connector_voi_database_moi(ten_database_moi):
                ket_qua_test['universal_connector'] = True
                
                # Test 3: Real-time update
                if test_cap_nhat_real_time():
                    ket_qua_test['real_time'] = True
    
    # Test 4: Kh√¥i ph·ª•c config c≈©
    if khoi_phuc_config_cu():
        ket_qua_test['khoi_phuc'] = True
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ KI·ªÇM TH·ª¨:")
    print("=" * 60)
    
    for test_name, ket_qua in ket_qua_test.items():
        status = "‚úÖ TH√ÄNH C√îNG" if ket_qua else "‚ùå TH·∫§T B·∫†I"
        print(f"  {test_name.upper():<20}: {status}")
    
    if all(ket_qua_test.values()):
        print("\nüéâ T·∫§T C·∫¢ KI·ªÇM TH·ª¨ TH√ÄNH C√îNG!")
        print("\nüí° K·∫æT LU·∫¨N:")
        print("=" * 60)
        print("‚úÖ C√ÇU H·ªéI 1: C√≥ th·ªÉ t·∫°o database m·ªõi v√† d·ª± √°n s·ª≠ d·ª•ng ƒë∆∞·ª£c")
        print("   - Universal Connector t·ª± ƒë·ªông ph√°t hi·ªán schema")
        print("   - Kh√¥ng c·∫ßn thay ƒë·ªïi code ch√≠nh")
        print("   - Ch·ªâ c·∫ßn c·∫≠p nh·∫≠t file config/database_config.json")
        print("")
        print("‚úÖ C√ÇU H·ªéI 2: C√≥ th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu real-time trong Tableau")
        print("   - D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·ª±c ti·∫øp trong database")
        print("   - API t·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t")
        print("   - Tableau refresh s·∫Ω hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi")
        print("   - Kh√¥ng c·∫ßn restart server hay thay ƒë·ªïi c·∫•u h√¨nh")
        
    else:
        print("\n‚ùå C√ì L·ªñI X·∫¢Y RA TRONG QU√Å TR√åNH KI·ªÇM TH·ª¨")
        print("üîß Vui l√≤ng ki·ªÉm tra:")
        print("  - SQL Server c√≥ ƒëang ch·∫°y kh√¥ng?")
        print("  - C√≥ quy·ªÅn t·∫°o database kh√¥ng?")
        print("  - Th∆∞ vi·ªán pymssql ƒë√£ c√†i ƒë·∫∑t ch∆∞a?")

if __name__ == "__main__":
    main()
