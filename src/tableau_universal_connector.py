#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tableau Universal Web Data Connector - API linh ho·∫°t
D·ª± √°n t·ªët nghi·ªáp - K·∫øt n·ªëi Tableau v·ªõi b·∫•t k·ª≥ SQL Server database n√†o

T√≠nh nƒÉng: T·ª± ƒë·ªông ƒë·ªçc c·∫•u h√¨nh database v√† schema
"""

from flask import Flask, render_template_string, jsonify, request
from datetime import datetime
import json
import os

app = Flask(__name__)

def doc_cau_hinh_database():
    """
    ƒê·ªçc c·∫•u h√¨nh database t·ª´ file
    """
    config_path = "config/database_config.json"
    if os.path.exists(config_path):
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        return {
            'server': '127.0.0.1',
            'port': 1433,
            'user': 'sa',
            'password': 'YourStrong!Pass123',
            'database': 'master'
        }

def lay_danh_sach_database():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ databases c√≥ s·∫µn
    """
    config = doc_cau_hinh_database()
    
    try:
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database='master'
        )
        
        con_tro = ket_noi.cursor()
        con_tro.execute("SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb') ORDER BY name")
        
        database_list = [db[0] for db in con_tro.fetchall()]
        ket_noi.close()
        return database_list
        
    except Exception as e:
        print(f"L·ªói l·∫•y danh s√°ch database: {e}")
        return []

def lay_danh_sach_bang(database_name=None):
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng trong database
    """
    config = doc_cau_hinh_database()
    if database_name:
        config['database'] = database_name
    
    try:
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        con_tro.execute("""
        SELECT TABLE_NAME 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_TYPE = 'BASE TABLE'
        ORDER BY TABLE_NAME
        """)
        
        bang_list = [bang[0] for bang in con_tro.fetchall()]
        ket_noi.close()
        return bang_list
        
    except Exception as e:
        print(f"L·ªói l·∫•y danh s√°ch b·∫£ng: {e}")
        return []

def doc_schema_bang(ten_bang):
    """
    ƒê·ªçc schema c·ªßa b·∫£ng t·ª´ file ho·∫∑c t·ª± ƒë·ªông ph√°t hi·ªán
    """
    schema_path = f"config/schema_{ten_bang}.json"
    
    if os.path.exists(schema_path):
        with open(schema_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # T·ª± ƒë·ªông ph√°t hi·ªán schema
        return tu_dong_phat_hien_schema(ten_bang)

def tu_dong_phat_hien_schema(ten_bang, database_name=None):
    """
    T·ª± ƒë·ªông ph√°t hi·ªán schema c·ªßa b·∫£ng
    """
    config = doc_cau_hinh_database()
    if database_name:
        config['database'] = database_name
    
    try:
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        con_tro.execute(f"""
        SELECT 
            COLUMN_NAME,
            DATA_TYPE
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_NAME = '{ten_bang}'
        ORDER BY ORDINAL_POSITION
        """)
        
        cot_list = con_tro.fetchall()
        
        columns = []
        for ten_cot, data_type in cot_list:
            # Chuy·ªÉn ƒë·ªïi SQL Server data type sang Tableau data type
            if data_type in ['int', 'bigint', 'smallint', 'tinyint']:
                tableau_type = 'int'
            elif data_type in ['decimal', 'numeric', 'float', 'real', 'money']:
                tableau_type = 'float'
            elif data_type in ['datetime', 'datetime2', 'date', 'time']:
                tableau_type = 'datetime'
            elif data_type in ['bit']:
                tableau_type = 'bool'
            else:
                tableau_type = 'string'
            
            columns.append({
                'column_name': ten_cot,
                'sql_type': data_type,
                'tableau_type': tableau_type
            })
        
        ket_noi.close()
        
        return {
            'table_name': ten_bang,
            'columns': columns,
            'database': config['database']
        }
        
    except Exception as e:
        print(f"L·ªói ph√°t hi·ªán schema: {e}")
        return None

# Template HTML linh ho·∫°t
TABLEAU_WDC_TEMPLATE = '''
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tableau Universal Database Connector</title>
    
    <!-- Tableau WDC API -->
    <script src="https://connectors.tableau.com/libs/tableauwdc-2.3.latest.js" type="text/javascript"></script>
    
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 700px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            padding: 30px;
        }
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
        }
        
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #34495e;
        }
        
        select, input {
            width: 100%;
            padding: 10px;
            border: 2px solid #ecf0f1;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        
        select:focus, input:focus {
            outline: none;
            border-color: #3498db;
        }
        
        button {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
            transition: transform 0.2s;
        }
        
        button:hover {
            transform: translateY(-2px);
        }
        
        .info {
            background: #e8f5e8;
            border: 1px solid #27ae60;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .warning {
            background: #fff3cd;
            border: 1px solid #ffc107;
            padding: 10px;
            border-radius: 5px;
            margin-top: 20px;
            font-size: 14px;
        }
        
        .database-info {
            background: #e3f2fd;
            border: 1px solid #2196f3;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåê Tableau Universal Database Connector</h1>
        <p class="subtitle">K·∫øt n·ªëi Tableau v·ªõi b·∫•t k·ª≥ SQL Server database n√†o</p>
        
        <div class="info">
            <strong>üéì D·ª± √°n t·ªët nghi·ªáp - T√≠nh nƒÉng n√¢ng cao:</strong>
            <ul>
                <li><strong>Universal Connection:</strong> K·∫øt n·ªëi v·ªõi b·∫•t k·ª≥ SQL Server database n√†o</li>
                <li><strong>Auto Schema Detection:</strong> T·ª± ƒë·ªông ph√°t hi·ªán c·∫•u tr√∫c b·∫£ng</li>
                <li><strong>Dynamic Data Loading:</strong> T·∫£i d·ªØ li·ªáu linh ho·∫°t theo c·∫•u h√¨nh</li>
                <li><strong>Tableau Integration:</strong> T∆∞∆°ng th√≠ch ho√†n to√†n v·ªõi Tableau Desktop</li>
            </ul>
        </div>
        
        <div class="form-group">
            <label for="databaseSelect">Ch·ªçn database:</label>
            <select id="databaseSelect">
                <option value="">ƒêang t·∫£i danh s√°ch database...</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="tableSelect">Ch·ªçn b·∫£ng d·ªØ li·ªáu:</label>
            <select id="tableSelect">
                <option value="">Ch·ªçn database tr∆∞·ªõc...</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="limitSelect">S·ªë l∆∞·ª£ng d√≤ng d·ªØ li·ªáu:</label>
            <select id="limitSelect">
                <option value="10">10 d√≤ng (Test nhanh)</option>
                <option value="50">50 d√≤ng (Demo c∆° b·∫£n)</option>
                <option value="100" selected>100 d√≤ng (Hi·ªÉn th·ªã ti√™u chu·∫©n)</option>
                <option value="500">500 d√≤ng (Dataset l·ªõn)</option>
                <option value="1000">1000 d√≤ng (To√†n b·ªô - n·∫øu c√≥)</option>
                <option value="0">T·∫•t c·∫£ d√≤ng (Kh√¥ng gi·ªõi h·∫°n)</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="orderSelect">S·∫Øp x·∫øp theo:</label>
            <select id="orderSelect">
                <option value="auto">T·ª± ƒë·ªông (theo c·ªôt ƒë·∫ßu ti√™n)</option>
                <option value="random">Ng·∫´u nhi√™n</option>
                <option value="custom">T√πy ch·ªânh (nh·∫≠p SQL WHERE)</option>
            </select>
        </div>
        
        <div class="form-group" id="customWhere" style="display: none;">
            <label for="whereInput">ƒêi·ªÅu ki·ªán WHERE (SQL):</label>
            <input type="text" id="whereInput" placeholder="VD: column_name > 100 AND other_column = 'value'">
        </div>
        
        <button type="button" id="submitButton">üöÄ K·∫øt n·ªëi v·ªõi Tableau Desktop</button>
        
        <div class="database-info">
            <strong>üìä Th√¥ng tin k·∫øt n·ªëi:</strong>
            <div id="databaseInfo">ƒêang t·∫£i th√¥ng tin database...</div>
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> 
            <ul>
                <li>ƒê·∫£m b·∫£o SQL Server ƒëang ch·∫°y v√† c√≥ th·ªÉ truy c·∫≠p</li>
                <li>Ki·ªÉm tra file c·∫•u h√¨nh config/database_config.json</li>
                <li>Ch·∫°y python scripts/cau_hinh_database.py ƒë·ªÉ c·∫•u h√¨nh k·∫øt n·ªëi</li>
            </ul>
        </div>
    </div>

    <script type="text/javascript">
        (function() {
            // Load th√¥ng tin database v√† b·∫£ng
            loadDatabaseInfo();
            loadDatabaseList();
            
            // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi database
            document.getElementById('databaseSelect').addEventListener('change', function() {
                var selectedDatabase = this.value;
                if (selectedDatabase) {
                    loadTableList(selectedDatabase);
                } else {
                    document.getElementById('tableSelect').innerHTML = '<option value="">Ch·ªçn database tr∆∞·ªõc...</option>';
                }
            });
            
            // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi order
            document.getElementById('orderSelect').addEventListener('change', function() {
                var customWhere = document.getElementById('customWhere');
                if (this.value === 'custom') {
                    customWhere.style.display = 'block';
                } else {
                    customWhere.style.display = 'none';
                }
            });
            
            function loadDatabaseInfo() {
                fetch('/api/database-info')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById('databaseInfo').innerHTML = 
                                `<strong>Server:</strong> ${data.server}:${data.port}<br>
                                 <strong>Database hi·ªán t·∫°i:</strong> ${data.database}<br>
                                 <strong>S·ªë b·∫£ng:</strong> ${data.table_count} b·∫£ng`;
                        }
                    })
                    .catch(error => console.error('Error loading database info:', error));
            }
            
            function loadDatabaseList() {
                fetch('/api/databases')
                    .then(response => response.json())
                    .then(data => {
                        var databaseSelect = document.getElementById('databaseSelect');
                        databaseSelect.innerHTML = '';
                        
                        if (data.success && data.databases.length > 0) {
                            // Th√™m option m·∫∑c ƒë·ªãnh
                            var defaultOption = document.createElement('option');
                            defaultOption.value = '';
                            defaultOption.textContent = 'Ch·ªçn database...';
                            databaseSelect.appendChild(defaultOption);
                            
                            data.databases.forEach(database => {
                                var option = document.createElement('option');
                                option.value = database;
                                option.textContent = database;
                                databaseSelect.appendChild(option);
                            });
                        } else {
                            var option = document.createElement('option');
                            option.textContent = 'Kh√¥ng t√¨m th·∫•y database n√†o';
                            databaseSelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading databases:', error);
                        document.getElementById('databaseSelect').innerHTML = '<option>L·ªói t·∫£i danh s√°ch database</option>';
                    });
            }
            
            function loadTableList(database) {
                var apiUrl = database ? `/api/tables?database=${encodeURIComponent(database)}` : '/api/tables';
                
                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        var tableSelect = document.getElementById('tableSelect');
                        tableSelect.innerHTML = '';
                        
                        if (data.success && data.tables.length > 0) {
                            data.tables.forEach(table => {
                                var option = document.createElement('option');
                                option.value = table;
                                option.textContent = table;
                                tableSelect.appendChild(option);
                            });
                        } else {
                            var option = document.createElement('option');
                            option.textContent = 'Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o';
                            tableSelect.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading tables:', error);
                        document.getElementById('tableSelect').innerHTML = '<option>L·ªói t·∫£i danh s√°ch b·∫£ng</option>';
                    });
            }
            
            // Kh·ªüi t·∫°o Tableau WDC
            var myConnector = tableau.makeConnector();
            
            // ƒê·ªãnh nghƒ©a schema ƒë·ªông
            myConnector.getSchema = function(schemaCallback) {
                var connectionData = JSON.parse(tableau.connectionData);
                var tableName = connectionData.table;
                var database = connectionData.database;
                
                // L·∫•y schema t·ª´ server
                var schemaUrl = `/api/schema/${tableName}`;
                if (database) {
                    schemaUrl += `?database=${encodeURIComponent(database)}`;
                }
                
                fetch(schemaUrl)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            var cols = data.schema.columns.map(col => ({
                                "id": col.column_name,
                                "alias": col.column_name,
                                "dataType": getTableauDataType(col.tableau_type)
                            }));
                            
                            var tableSchema = {
                                "id": tableName,
                                "alias": `D·ªØ li·ªáu t·ª´ ${database}.${tableName}`,
                                "columns": cols
                            };
                            
                            schemaCallback([tableSchema]);
                        } else {
                            tableau.abortWithError("Kh√¥ng th·ªÉ l·∫•y schema c·ªßa b·∫£ng");
                        }
                    })
                    .catch(error => {
                        console.error("L·ªói l·∫•y schema:", error);
                        tableau.abortWithError("L·ªói k·∫øt n·ªëi server");
                    });
            };
            
            function getTableauDataType(type) {
                switch(type) {
                    case 'int': return tableau.dataTypeEnum.int;
                    case 'float': return tableau.dataTypeEnum.float;
                    case 'datetime': return tableau.dataTypeEnum.datetime;
                    case 'bool': return tableau.dataTypeEnum.bool;
                    default: return tableau.dataTypeEnum.string;
                }
            }
            
            // L·∫•y d·ªØ li·ªáu
            myConnector.getData = function(table, doneCallback) {
                var connectionData = JSON.parse(tableau.connectionData);
                
                var apiUrl = `/api/data/${connectionData.table}?limit=${connectionData.limit}&order=${connectionData.order}`;
                if (connectionData.database) {
                    apiUrl += `&database=${encodeURIComponent(connectionData.database)}`;
                }
                if (connectionData.where) {
                    apiUrl += `&where=${encodeURIComponent(connectionData.where)}`;
                }
                
                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data) {
                            table.appendRows(data.data);
                        }
                        doneCallback();
                    })
                    .catch(error => {
                        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
                        tableau.abortWithError("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API");
                    });
            };
            
            // ƒêƒÉng k√Ω connector
            tableau.registerConnector(myConnector);
            
            // X·ª≠ l√Ω s·ª± ki·ªán submit
            document.getElementById("submitButton").addEventListener("click", function() {
                var database = document.getElementById("databaseSelect").value;
                var table = document.getElementById("tableSelect").value;
                var limit = document.getElementById("limitSelect").value;
                var order = document.getElementById("orderSelect").value;
                var where = document.getElementById("whereInput").value;
                
                if (!database) {
                    alert("Vui l√≤ng ch·ªçn database");
                    return;
                }
                
                if (!table) {
                    alert("Vui l√≤ng ch·ªçn b·∫£ng d·ªØ li·ªáu");
                    return;
                }
                
                tableau.connectionData = JSON.stringify({
                    "database": database,
                    "table": table,
                    "limit": limit,
                    "order": order,
                    "where": where
                });
                
                tableau.connectionName = `${database}.${table} (${limit === '0' ? 'T·∫•t c·∫£' : limit} d√≤ng)`;
                tableau.submit();
            });
        })();
    </script>
</body>
</html>
'''

# Routes
@app.route('/')
def tableau_wdc():
    """
    Trang ch√≠nh c·ªßa Tableau Universal Database Connector
    """
    return render_template_string(TABLEAU_WDC_TEMPLATE)

@app.route('/api/database-info')
def database_info():
    """
    L·∫•y th√¥ng tin database hi·ªán t·∫°i
    """
    try:
        config = doc_cau_hinh_database()
        bang_list = lay_danh_sach_bang()
        
        return jsonify({
            "success": True,
            "server": config['server'],
            "port": config['port'],
            "database": config['database'],
            "table_count": len(bang_list)
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/api/databases')
def list_databases():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ databases
    """
    try:
        database_list = lay_danh_sach_database()
        return jsonify({
            "success": True,
            "databases": database_list
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "databases": []
        })

@app.route('/api/tables')
def list_tables():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng trong database
    """
    try:
        database_name = request.args.get('database', None)
        bang_list = lay_danh_sach_bang(database_name)
        return jsonify({
            "success": True,
            "tables": bang_list,
            "database": database_name or doc_cau_hinh_database()['database']
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "tables": []
        })

@app.route('/api/schema/<table_name>')
def get_table_schema(table_name):
    """
    L·∫•y schema c·ªßa b·∫£ng
    """
    try:
        database_name = request.args.get('database', None)
        schema = tu_dong_phat_hien_schema(table_name, database_name)
        if schema:
            return jsonify({
                "success": True,
                "schema": schema
            })
        else:
            return jsonify({
                "success": False,
                "error": "Kh√¥ng th·ªÉ l·∫•y schema"
            })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/api/data/<table_name>')
def get_table_data(table_name):
    """
    L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng
    """
    try:
        config = doc_cau_hinh_database()
        database_name = request.args.get('database', None)
        if database_name:
            config['database'] = database_name
            
        limit = request.args.get('limit', '100')
        order = request.args.get('order', 'auto')
        where_clause = request.args.get('where', '')
        
        import pymssql
        ket_noi = pymssql.connect(
            server=config['server'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            database=config['database']
        )
        
        con_tro = ket_noi.cursor()
        
        # X√¢y d·ª±ng c√¢u truy v·∫•n
        if limit == '0':
            limit_clause = ""
        else:
            limit_clause = f"TOP {limit}"
        
        # X·ª≠ l√Ω ORDER BY
        if order == 'random':
            order_clause = "ORDER BY NEWID()"
        elif order == 'auto':
            order_clause = ""
        else:
            order_clause = ""
        
        # X·ª≠ l√Ω WHERE
        if where_clause:
            where_sql = f"WHERE {where_clause}"
        else:
            where_sql = ""
        
        query = f"SELECT {limit_clause} * FROM [{table_name}] {where_sql} {order_clause}"
        
        con_tro.execute(query)
        ket_qua = con_tro.fetchall()
        
        # L·∫•y t√™n c·ªôt
        schema = tu_dong_phat_hien_schema(table_name, database_name)
        if schema:
            columns = [col['column_name'] for col in schema['columns']]
        else:
            columns = [desc[0] for desc in con_tro.description]
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
        du_lieu_json = []
        for dong in ket_qua:
            dong_dict = {}
            for i, gia_tri in enumerate(dong):
                if isinstance(gia_tri, datetime):
                    dong_dict[columns[i]] = gia_tri.isoformat()
                elif gia_tri is None:
                    dong_dict[columns[i]] = None
                else:
                    dong_dict[columns[i]] = gia_tri
            du_lieu_json.append(dong_dict)
        
        ket_noi.close()
        
        return jsonify({
            "success": True,
            "data": du_lieu_json,
            "count": len(du_lieu_json),
            "table": table_name,
            "database": config['database'],
            "query": query,
            "timestamp": datetime.now().isoformat(),
            "message": f"L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng {table_name} th√†nh c√¥ng"
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "data": []
        })

if __name__ == '__main__':
    print("üåê TABLEAU UNIVERSAL DATABASE CONNECTOR")
    print("=" * 55)
    print("üöÄ ƒêang kh·ªüi ƒë·ªông server...")
    print("üîó URL cho Tableau: http://127.0.0.1:5002")
    print("üìä C·∫•u h√¨nh database: config/database_config.json")
    print("")
    print("üéØ T√çNH NƒÇNG N√ÇNG CAO:")
    print("  ‚úÖ K·∫øt n·ªëi v·ªõi b·∫•t k·ª≥ SQL Server database n√†o")
    print("  ‚úÖ T·ª± ƒë·ªông ph√°t hi·ªán schema c·ªßa b·∫£ng")
    print("  ‚úÖ Linh ho·∫°t ch·ªçn b·∫£ng v√† s·ªë l∆∞·ª£ng d·ªØ li·ªáu")
    print("  ‚úÖ H·ªó tr·ª£ c√¢u truy v·∫•n WHERE t√πy ch·ªânh")
    print("")
    print("‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
    print("=" * 55)
    
    app.run(debug=True, host='127.0.0.1', port=5002)
