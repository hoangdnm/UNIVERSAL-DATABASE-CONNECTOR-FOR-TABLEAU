#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, render_template_string, jsonify, request
from datetime import datetime
import json
import os
import sys

# Them thu muc src vao path de import duoc database_connector
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Import module ket noi database
import database_connector as db_conn


app = Flask(__name__)

def doc_cau_hinh_database():
    """
    ƒê·ªçc c·∫•u h√¨nh database t·ª´ file
    """
    return db_conn.doc_cau_hinh_database()

def lay_danh_sach_database():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ databases c√≥ s·∫µn
    """
    return db_conn.lay_danh_sach_database()

def lay_danh_sach_bang(database_name=None):
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng trong database
    """
    return db_conn.lay_danh_sach_bang(database_name)

def doc_schema_bang(ten_bang):
    """
    ƒê·ªçc schema c·ªßa b·∫£ng t·ª´ file ho·∫∑c t·ª± ƒë·ªông ph√°t hi·ªán
    """
    schema_path = f"config/schema_{ten_bang}.json"
    
    if os.path.exists(schema_path):
        with open(schema_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # T·ª± ƒë·ªông ph√°t hi·ªán schema
        return tu_dong_phat_hien_schema(ten_bang)

def tu_dong_phat_hien_schema(ten_bang, database_name=None):
    """
    T·ª± ƒë·ªông ph√°t hi·ªán schema c·ªßa b·∫£ng
    """
    config = doc_cau_hinh_database()
    if database_name:
        db_name = database_name
    else:
        db_name = config['database']
    
    try:
        columns = db_conn.lay_schema_bang(ten_bang, db_name)
        
        return {
            'table_name': ten_bang,
            'columns': columns,
            'database': db_name
        }
        
    except Exception as e:
        print(f"L·ªói ph√°t hi·ªán schema: {e}")
        return None

# Template HTML linh ho·∫°t
TABLEAU_WDC_TEMPLATE = '''
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tableau Universal Database Connector</title>
    
    <!-- Tableau WDC API -->
    <script src="https://connectors.tableau.com/libs/tableauwdc-2.3.latest.js" type="text/javascript"></script>
    
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 700px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            padding: 30px;
        }
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
        }
        
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #34495e;
        }
        
        select, input {
            width: 100%;
            padding: 10px;
            border: 2px solid #ecf0f1;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        
        select:focus, input:focus {
            outline: none;
            border-color: #3498db;
        }
        
        button {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
            transition: transform 0.2s;
        }
        
        button:hover {
            transform: translateY(-2px);
        }
        
        .info {
            background: #e8f5e8;
            border: 1px solid #27ae60;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .warning {
            background: #fff3cd;
            border: 1px solid #ffc107;
            padding: 10px;
            border-radius: 5px;
            margin-top: 20px;
            font-size: 14px;
        }
        
        .database-info {
            background: #e3f2fd;
            border: 1px solid #2196f3;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        
        .table-checkbox {
            display: flex;
            align-items: center;
            padding: 8px;
            margin: 5px 0;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .table-checkbox:hover {
            background-color: #f8f9fa;
        }
        
        .table-checkbox input[type="checkbox"] {
            margin-right: 10px;
            width: auto;
        }
        
        .table-checkbox label {
            margin: 0;
            cursor: pointer;
            font-weight: normal;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåê Tableau Universal Database Connector</h1>
        <p class="subtitle">K·∫øt n·ªëi Tableau v·ªõi b·∫•t k·ª≥ SQL Server database n√†o</p>
        
        <div class="info">
            <strong>üéì D·ª± √°n t·ªët nghi·ªáp - T√≠nh nƒÉng n√¢ng cao:</strong>
            <ul>
                <li><strong>Universal Connection:</strong> K·∫øt n·ªëi v·ªõi b·∫•t k·ª≥ SQL Server database n√†o</li>
                <li><strong>Auto Schema Detection:</strong> T·ª± ƒë·ªông ph√°t hi·ªán c·∫•u tr√∫c b·∫£ng</li>
                <li><strong>Multi-Table Focus:</strong> üÜï Ch·ªçn v√† k·∫øt h·ª£p nhi·ªÅu b·∫£ng c√πng l√∫c</li>
                <li><strong>Dynamic Data Loading:</strong> T·∫£i d·ªØ li·ªáu linh ho·∫°t theo c·∫•u h√¨nh</li>
                <li><strong>Tableau Integration:</strong> T∆∞∆°ng th√≠ch ho√†n to√†n v·ªõi Tableau Desktop</li>
            </ul>
        </div>
        
        <div class="form-group">
            <label>Ch·ªçn database (c√≥ th·ªÉ ch·ªçn nhi·ªÅu):</label>
            <div id="databasesContainer" style="max-height: 150px; overflow-y: auto; border: 2px solid #ecf0f1; border-radius: 5px; padding: 10px; background: white;">
                <div style="color: #7f8c8d; font-style: italic;">ƒêang t·∫£i danh s√°ch database...</div>
            </div>
            <div style="margin-top: 5px; font-size: 12px; color: #7f8c8d;">
                <span id="selectedDatabasesCount">0</span> database ƒë√£ ch·ªçn
            </div>
        </div>
        
        <div class="form-group">
            <label>Ch·ªçn c√°c b·∫£ng d·ªØ li·ªáu (c√≥ th·ªÉ ch·ªçn nhi·ªÅu):</label>
            <div id="tablesContainer" style="max-height: 250px; overflow-y: auto; border: 2px solid #ecf0f1; border-radius: 5px; padding: 10px; background: white;">
                <div style="color: #7f8c8d; font-style: italic;">Ch·ªçn database tr∆∞·ªõc ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch b·∫£ng...</div>
            </div>
            <div style="margin-top: 5px; font-size: 12px; color: #7f8c8d;">
                <span id="selectedTablesCount">0</span> b·∫£ng ƒë√£ ch·ªçn
            </div>
        </div>
        
        <div class="form-group">
            <label for="limitSelect">S·ªë l∆∞·ª£ng d√≤ng d·ªØ li·ªáu:</label>
            <select id="limitSelect">
                <option value="10">10 d√≤ng (Test nhanh)</option>
                <option value="50">50 d√≤ng (Demo c∆° b·∫£n)</option>
                <option value="100" selected>100 d√≤ng (Hi·ªÉn th·ªã ti√™u chu·∫©n)</option>
                <option value="500">500 d√≤ng (Dataset l·ªõn)</option>
                <option value="1000">1000 d√≤ng (To√†n b·ªô - n·∫øu c√≥)</option>
                <option value="0">T·∫•t c·∫£ d√≤ng (Kh√¥ng gi·ªõi h·∫°n)</option>
            </select>
        </div>
        
        <div class="form-group">
            <label for="orderSelect">S·∫Øp x·∫øp theo:</label>
            <select id="orderSelect">
                <option value="auto">T·ª± ƒë·ªông (theo c·ªôt ƒë·∫ßu ti√™n)</option>
                <option value="random">Ng·∫´u nhi√™n</option>
                <option value="custom">T√πy ch·ªânh (nh·∫≠p SQL WHERE)</option>
            </select>
        </div>
        
        <div class="form-group" id="customWhere" style="display: none;">
            <label for="whereInput">ƒêi·ªÅu ki·ªán WHERE (SQL):</label>
            <input type="text" id="whereInput" placeholder="VD: column_name > 100 AND other_column = 'value'">
        </div>
        
        <button type="button" id="submitButton">üöÄ K·∫øt n·ªëi v·ªõi Tableau Desktop</button>
        
        <div class="database-info">
            <strong>üìä Th√¥ng tin k·∫øt n·ªëi:</strong>
            <div id="databaseInfo">ƒêang t·∫£i th√¥ng tin database...</div>
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> 
            <ul>
                <li>ƒê·∫£m b·∫£o SQL Server ƒëang ch·∫°y v√† c√≥ th·ªÉ truy c·∫≠p</li>
                <li>Ki·ªÉm tra file c·∫•u h√¨nh config/database_config.json</li>
                <li>Ch·∫°y python scripts/cau_hinh_database.py ƒë·ªÉ c·∫•u h√¨nh k·∫øt n·ªëi</li>
            </ul>
        </div>
    </div>

    <script type="text/javascript">
        // Global functions c·∫ßn thi·∫øt cho HTML inline events
        
        // ===== FUNCTIONS CHO DATABASE CHECKBOXES =====
        function toggleAllDatabases() {
            var selectAllCheckbox = document.getElementById('selectAllDatabases');
            var databaseCheckboxes = document.querySelectorAll('input[name="selectedDatabases"]');
            
            databaseCheckboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
            
            updateSelectedDatabasesCount();
            loadTablesFromSelectedDatabases();
        }
        
        // ===== FUNCTION LOAD B·∫¢NG T·ª™ NHI·ªÄU DATABASE =====
        function loadTablesFromSelectedDatabases() {
            var selectedDatabases = getSelectedDatabases();
            console.log('üîÑ ƒêang t·∫£i b·∫£ng t·ª´', selectedDatabases.length, 'database(s):', selectedDatabases);
            
            var tablesContainer = document.getElementById('tablesContainer');
            
            if (selectedDatabases.length === 0) {
                tablesContainer.innerHTML = '<div style="color: #7f8c8d; font-style: italic;">Ch·ªçn database tr∆∞·ªõc ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch b·∫£ng...</div>';
                updateSelectedTablesCount();
                return;
            }
            
            tablesContainer.innerHTML = '<div style="color: #7f8c8d; font-style: italic;">ƒêang t·∫£i b·∫£ng...</div>';
            
            // Load b·∫£ng t·ª´ t·ª´ng database
            Promise.all(selectedDatabases.map(database => 
                fetch(`/api/tables?database=${encodeURIComponent(database)}`)
                    .then(response => response.json())
                    .then(data => ({ database, data }))
            ))
            .then(results => {
                tablesContainer.innerHTML = '';
                
                // Th√™m checkbox "Ch·ªçn t·∫•t c·∫£"
                var selectAllDiv = document.createElement('div');
                selectAllDiv.className = 'table-checkbox';
                selectAllDiv.innerHTML = `
                    <input type="checkbox" id="selectAllTables" onchange="toggleAllTables()">
                    <label for="selectAllTables"><strong>Ch·ªçn t·∫•t c·∫£ b·∫£ng</strong></label>
                `;
                tablesContainer.appendChild(selectAllDiv);
                
                // Th√™m ƒë∆∞·ªùng ph√¢n c√°ch
                var separator = document.createElement('hr');
                separator.style.margin = '10px 0';
                tablesContainer.appendChild(separator);
                
                // Hi·ªÉn th·ªã b·∫£ng t·ª´ t·ª´ng database
                results.forEach(result => {
                    var database = result.database;
                    var data = result.data;
                    
                    if (data.success && data.tables && data.tables.length > 0) {
                        // Th√™m header database
                        var dbHeader = document.createElement('div');
                        dbHeader.style.cssText = 'font-weight: bold; color: #2980b9; margin-top: 15px; margin-bottom: 8px; padding: 5px; background: #ecf0f1; border-radius: 4px;';
                        dbHeader.textContent = `‚îÅ‚îÅ‚îÅ ${database} (${data.tables.length} b·∫£ng) ‚îÅ‚îÅ‚îÅ`;
                        tablesContainer.appendChild(dbHeader);
                        
                        // Th√™m checkbox cho t·ª´ng b·∫£ng v·ªõi format DB.Table
                        data.tables.forEach(table => {
                            var tableDiv = document.createElement('div');
                            tableDiv.className = 'table-checkbox';
                            var tableId = `${database}.${table}`;
                            tableDiv.innerHTML = `
                                <input type="checkbox" id="table_${tableId.replace(/\./g, '_')}" name="selectedTables" value="${tableId}" onchange="updateSelectedTablesCount()">
                                <label for="table_${tableId.replace(/\./g, '_')}">  ‚Ä¢ ${table}</label>
                            `;
                            tablesContainer.appendChild(tableDiv);
                        });
                    }
                });
                
                updateSelectedTablesCount();
                console.log('‚úÖ ƒê√£ t·∫£i xong b·∫£ng t·ª´', selectedDatabases.length, 'database(s)');
            })
            .catch(error => {
                console.error('‚ùå Error loading tables:', error);
                tablesContainer.innerHTML = '<div style="color: #dc3545; font-style: italic;">L·ªói t·∫£i danh s√°ch b·∫£ng</div>';
            });
        }
        
        function updateSelectedDatabasesCount(shouldLoadTables) {
            console.log('üîç updateSelectedDatabasesCount called, shouldLoadTables:', shouldLoadTables);
            var selectedCheckboxes = document.querySelectorAll('input[name="selectedDatabases"]:checked');
            var countElement = document.getElementById('selectedDatabasesCount');
            
            console.log('üìä Selected databases:', selectedCheckboxes.length);
            
            if (countElement) {
                countElement.textContent = selectedCheckboxes.length;
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i "Ch·ªçn t·∫•t c·∫£"
            var selectAllCheckbox = document.getElementById('selectAllDatabases');
            var allCheckboxes = document.querySelectorAll('input[name="selectedDatabases"]');
            
            if (selectAllCheckbox && allCheckboxes.length > 0) {
                if (selectedCheckboxes.length === 0) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                } else if (selectedCheckboxes.length === allCheckboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.indeterminate = true;
                    selectAllCheckbox.checked = false;
                }
            }
            
            // Ch·ªâ t·ª± ƒë·ªông load b·∫£ng khi user thay ƒë·ªïi selection (kh√¥ng ph·∫£i l√∫c init)
            if (shouldLoadTables !== false) {
                loadTablesFromSelectedDatabases();
            }
        }
        
        function getSelectedDatabases() {
            var selectedCheckboxes = document.querySelectorAll('input[name="selectedDatabases"]:checked');
            return Array.from(selectedCheckboxes).map(checkbox => checkbox.value);
        }
        
        // ===== FUNCTIONS CHO TABLE CHECKBOXES =====
        function toggleAllTables() {
            var selectAllCheckbox = document.getElementById('selectAllTables');
            var tableCheckboxes = document.querySelectorAll('input[name="selectedTables"]');
            
            tableCheckboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
            
            updateSelectedTablesCount();
        }
        
        function updateSelectedTablesCount() {
            var selectedCheckboxes = document.querySelectorAll('input[name="selectedTables"]:checked');
            var countElement = document.getElementById('selectedTablesCount');
            
            if (countElement) {
                countElement.textContent = selectedCheckboxes.length;
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i "Ch·ªçn t·∫•t c·∫£"
            var selectAllCheckbox = document.getElementById('selectAllTables');
            var allCheckboxes = document.querySelectorAll('input[name="selectedTables"]');
            
            if (selectAllCheckbox && allCheckboxes.length > 0) {
                if (selectedCheckboxes.length === 0) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                } else if (selectedCheckboxes.length === allCheckboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.indeterminate = true;
                    selectAllCheckbox.checked = false;
                }
            }
        }
        
        function getSelectedTables() {
            var selectedCheckboxes = document.querySelectorAll('input[name="selectedTables"]:checked');
            return Array.from(selectedCheckboxes).map(checkbox => checkbox.value);
        }
        
        (function() {
            // ƒê·ªçc URL parameters (h·ªó tr·ª£ c·∫£ format c≈© v√† m·ªõi)
            function getUrlParams() {
                const params = new URLSearchParams(window.location.search);
                return {
                    // Format m·ªõi: databases=DB1,DB2,DB3
                    databases: params.get('databases') ? params.get('databases').split(',') : 
                               // Format c≈©: database=DB1 (backwards compatible)
                               (params.get('database') ? [params.get('database')] : []),
                    // tables v·ªõi format DB.Table ho·∫∑c Table
                    tables: params.get('tables') ? params.get('tables').split(',') : []
                };
            }
            
            // Load th√¥ng tin database v√† b·∫£ng
            loadDatabaseInfo();
            loadDatabaseList();
            
            // X·ª≠ l√Ω URL parameters sau khi load xong database list
            const urlParams = getUrlParams();
            if (urlParams.databases.length > 0) {
                console.log('üîó Ph√°t hi·ªán URL parameters:', urlParams);
                // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ database list load xong
                setTimeout(function() {
                    // Ch·ªçn c√°c database
                    urlParams.databases.forEach(function(dbName) {
                        const checkbox = document.getElementById('db_' + dbName);
                        if (checkbox) {
                            checkbox.checked = true;
                            console.log('‚úÖ ƒê√£ ch·ªçn database:', dbName);
                        }
                    });
                    updateSelectedDatabasesCount();
                    
                    // Load b·∫£ng t·ª´ c√°c database ƒë√£ ch·ªçn
                    loadTablesFromSelectedDatabases();
                    
                    // ƒê·ª£i tables load xong r·ªìi m·ªõi check c√°c b·∫£ng
                    if (urlParams.tables.length > 0) {
                        setTimeout(function() {
                            urlParams.tables.forEach(function(tableName) {
                                // tableName c√≥ th·ªÉ l√† "DB.Table" ho·∫∑c "Table"
                                const tableId = 'table_' + tableName.replace(/\./g, '_');
                                const checkbox = document.getElementById(tableId);
                                if (checkbox) {
                                    checkbox.checked = true;
                                    console.log('‚úÖ ƒê√£ ch·ªçn b·∫£ng:', tableName);
                                }
                            });
                            updateSelectedTablesCount();
                        }, 1500);
                    }
                }, 500);
            }
            
            // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi order
            document.getElementById('orderSelect').addEventListener('change', function() {
                var customWhere = document.getElementById('customWhere');
                if (this.value === 'custom') {
                    customWhere.style.display = 'block';
                } else {
                    customWhere.style.display = 'none';
                }
            });
            
            function loadDatabaseInfo() {
                console.log('üîÑ ƒêang t·∫£i th√¥ng tin database...');
                fetch('/api/database-info')
                    .then(response => {
                        console.log('üì° Database info response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('üìä Database info response:', data);
                        if (data.success) {
                            document.getElementById('databaseInfo').innerHTML = 
                                `<strong>Server:</strong> ${data.server}:${data.port}<br>
                                 <strong>Database hi·ªán t·∫°i:</strong> ${data.database}<br>
                                 <strong>S·ªë b·∫£ng:</strong> ${data.table_count} b·∫£ng`;
                        } else {
                            document.getElementById('databaseInfo').innerHTML = 
                                `<span style="color: red;">L·ªói: ${data.error || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin database'}</span>`;
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error loading database info:', error);
                        document.getElementById('databaseInfo').innerHTML = 
                            `<span style="color: red;">L·ªói k·∫øt n·ªëi: ${error.message}</span>`;
                    });
            }
            
            function loadDatabaseList() {
                console.log('üîÑ ƒêang t·∫£i danh s√°ch database...');
                fetch('/api/databases')
                    .then(response => {
                        console.log('üì° Response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('üìä Database API response:', data);
                        var databasesContainer = document.getElementById('databasesContainer');
                        databasesContainer.innerHTML = '';
                        
                        if (data.success && data.databases && data.databases.length > 0) {
                            console.log('‚úÖ T√¨m th·∫•y', data.databases.length, 'database(s)');
                            
                            // Th√™m checkbox "Ch·ªçn t·∫•t c·∫£"
                            var selectAllDiv = document.createElement('div');
                            selectAllDiv.className = 'table-checkbox';
                            selectAllDiv.innerHTML = `
                                <input type="checkbox" id="selectAllDatabases" onchange="toggleAllDatabases()">
                                <label for="selectAllDatabases"><strong>Ch·ªçn t·∫•t c·∫£ database</strong></label>
                            `;
                            databasesContainer.appendChild(selectAllDiv);
                            
                            // Th√™m ƒë∆∞·ªùng ph√¢n c√°ch
                            var separator = document.createElement('hr');
                            separator.style.margin = '10px 0';
                            databasesContainer.appendChild(separator);
                            
                            // Th√™m checkbox cho t·ª´ng database
                            data.databases.forEach(database => {
                                var dbDiv = document.createElement('div');
                                dbDiv.className = 'table-checkbox';
                                dbDiv.innerHTML = `
                                    <input type="checkbox" id="db_${database}" name="selectedDatabases" value="${database}" onchange="updateSelectedDatabasesCount()">
                                    <label for="db_${database}">${database}</label>
                                `;
                                databasesContainer.appendChild(dbDiv);
                                console.log('‚ûï ƒê√£ th√™m database:', database);
                            });
                            
                            // Init: ch·ªâ update count, kh√¥ng load tables
                            updateSelectedDatabasesCount(false);
                        } else {
                            console.log('‚ùå Kh√¥ng t√¨m th·∫•y database ho·∫∑c l·ªói:', data);
                            databasesContainer.innerHTML = `<div style="color: #dc3545; font-style: italic;">${data.success ? 'Kh√¥ng t√¨m th·∫•y database n√†o' : ('L·ªói: ' + (data.error || 'Unknown error'))}</div>`;
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error loading databases:', error);
                        document.getElementById('databasesContainer').innerHTML = '<div style="color: #dc3545; font-style: italic;">L·ªói t·∫£i danh s√°ch database</div>';
                    });
            }
            
            function loadTableList(database) {
                console.log('üîÑ ƒêang t·∫£i danh s√°ch b·∫£ng cho database:', database);
                var apiUrl = database ? `/api/tables?database=${encodeURIComponent(database)}` : '/api/tables';
                console.log('üì° API URL:', apiUrl);
                
                fetch(apiUrl)
                    .then(response => {
                        console.log('üì° Tables response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('üìä Tables API response:', data);
                        var tablesContainer = document.getElementById('tablesContainer');
                        tablesContainer.innerHTML = '';
                        
                        if (data.success && data.tables && data.tables.length > 0) {
                            console.log('‚úÖ T√¨m th·∫•y', data.tables.length, 'b·∫£ng');
                            
                            // T·∫°o checkbox "Ch·ªçn t·∫•t c·∫£"
                            var selectAllDiv = document.createElement('div');
                            selectAllDiv.className = 'table-checkbox';
                            selectAllDiv.innerHTML = `
                                <input type="checkbox" id="selectAllTables" onchange="toggleAllTables()">
                                <label for="selectAllTables"><strong>Ch·ªçn t·∫•t c·∫£ b·∫£ng</strong></label>
                            `;
                            tablesContainer.appendChild(selectAllDiv);
                            
                            // Th√™m ƒë∆∞·ªùng ph√¢n c√°ch
                            var separator = document.createElement('hr');
                            separator.style.margin = '10px 0';
                            tablesContainer.appendChild(separator);
                            
                            data.tables.forEach(table => {
                                var tableDiv = document.createElement('div');
                                tableDiv.className = 'table-checkbox';
                                tableDiv.innerHTML = `
                                    <input type="checkbox" id="table_${table}" name="selectedTables" value="${table}" onchange="updateSelectedTablesCount()">
                                    <label for="table_${table}">${table}</label>
                                `;
                                tablesContainer.appendChild(tableDiv);
                                console.log('‚ûï ƒê√£ th√™m b·∫£ng:', table);
                            });
                            
                            updateSelectedTablesCount();
                        } else {
                            console.log('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng ho·∫∑c l·ªói:', data);
                            tablesContainer.innerHTML = `<div style="color: #dc3545; font-style: italic;">${data.success ? 'Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o trong database n√†y' : ('L·ªói: ' + (data.error || 'Unknown error'))}</div>`;
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error loading tables:', error);
                        document.getElementById('tablesContainer').innerHTML = '<div style="color: #dc3545; font-style: italic;">L·ªói t·∫£i danh s√°ch b·∫£ng</div>';
                    });
            }
            
            // Kh·ªüi t·∫°o Tableau WDC
            var myConnector = tableau.makeConnector();
            
            // ƒê·ªãnh nghƒ©a schema ƒë·ªông - m·ªói b·∫£ng ri√™ng bi·ªát (KH√îNG k·∫øt h·ª£p)
            myConnector.getSchema = function(schemaCallback) {
                var connectionData = JSON.parse(tableau.connectionData);
                var selectedTables = connectionData.tables;
                var database = connectionData.database;
                
                if (!selectedTables || selectedTables.length === 0) {
                    tableau.abortWithError("Kh√¥ng c√≥ b·∫£ng n√†o ƒë∆∞·ª£c ch·ªçn");
                    return;
                }
                
                console.log(`üîÑ T·∫°o schema cho ${selectedTables.length} b·∫£ng ri√™ng bi·ªát...`);
                
                // T·∫°o schema ri√™ng cho t·ª´ng b·∫£ng (KH√îNG k·∫øt h·ª£p)
                var allSchemas = [];
                var processedCount = 0;
                
                selectedTables.forEach(function(tableName) {
                    var schemaUrl = `/api/schema/${tableName}`;
                    if (database) {
                        schemaUrl += `?database=${encodeURIComponent(database)}`;
                    }
                    
                    fetch(schemaUrl)
                        .then(response => response.json())
                        .then(data => {
                                if (data.success) {
                                // Validate server response
                                if (!data.schema || !Array.isArray(data.schema.columns)) {
                                    console.error('‚ùå Response schema missing or malformed for', tableName, data);
                                    tableau.abortWithError(`Server returned invalid schema for ${tableName}`);
                                    return;
                                }

                                var cols = data.schema.columns.map(function(col) {
                                    // Basic validation per-column
                                    if (!col || !col.column_name) {
                                        console.error('‚ùå Column metadata missing column_name:', col, 'for table', tableName);
                                        return null;
                                    }
                                    return {
                                        "id": String(col.column_name),
                                        "alias": String(col.column_name),
                                        "dataType": getTableauDataType(col.tableau_type)
                                    };
                                }).filter(function(c){ return c !== null; });

                                // Ensure columns is not empty
                                if (!cols || cols.length === 0) {
                                    console.error('‚ùå No columns returned for', tableName, data.schema);
                                    tableau.abortWithError(`Schema for ${tableName} contains no columns`);
                                    return;
                                }

                                // M·ªói b·∫£ng l√† m·ªôt table ri√™ng bi·ªát trong Tableau
                                // QUAN TR·ªåNG: Tableau y√™u c·∫ßu id ch·ªâ ch·ª©a [a-zA-Z0-9_]
                                // Thay d·∫•u '.' b·∫±ng '_' trong id, nh∆∞ng gi·ªØ nguy√™n alias
                                var tableSchema = {
                                    "id": String(tableName).replace(/\./g, '_'),  // SAMPLE.dbo.GIAODICH -> SAMPLE_dbo_GIAODICH
                                    "alias": `${tableName} (${database})`,         // Hi·ªÉn th·ªã: SAMPLE.dbo.GIAODICH (SAMPLE)
                                    "columns": cols
                                };
                                
                                allSchemas.push(tableSchema);
                                processedCount++;
                                
                                console.log(`‚úÖ ƒê√£ t·∫°o schema cho b·∫£ng: ${tableName} (id: ${tableSchema.id})`);
                                
                                // Khi ƒë√£ x·ª≠ l√Ω xong t·∫•t c·∫£ b·∫£ng
                                if (processedCount === selectedTables.length) {
                                    console.log(`üéâ Ho√†n th√†nh t·∫°o ${allSchemas.length} table schema ri√™ng bi·ªát`);
                                    schemaCallback(allSchemas);
                                }
                            } else {
                                tableau.abortWithError(`Kh√¥ng th·ªÉ l·∫•y schema c·ªßa b·∫£ng ${tableName}`);
                            }
                        })
                        .catch(error => {
                            console.error(`L·ªói l·∫•y schema b·∫£ng ${tableName}:`, error);
                            tableau.abortWithError(`L·ªói k·∫øt n·ªëi server khi l·∫•y schema ${tableName}`);
                        });
                });
            };
            
            function getTableauDataType(type) {
                switch(type) {
                    case 'int': return tableau.dataTypeEnum.int;
                    case 'float': return tableau.dataTypeEnum.float;
                    case 'datetime': return tableau.dataTypeEnum.datetime;
                    case 'bool': return tableau.dataTypeEnum.bool;
                    default: return tableau.dataTypeEnum.string;
                }
            }
            
            // L·∫•y d·ªØ li·ªáu cho t·ª´ng b·∫£ng ri√™ng bi·ªát (KH√îNG k·∫øt h·ª£p)
            myConnector.getData = function(table, doneCallback) {
                var connectionData = JSON.parse(tableau.connectionData);
                var selectedTables = connectionData.tables;
                
                if (!selectedTables || selectedTables.length === 0) {
                    tableau.abortWithError("Kh√¥ng c√≥ b·∫£ng n√†o ƒë∆∞·ª£c ch·ªçn");
                    return;
                }
                
                // T√¨m b·∫£ng n√†o ƒëang ƒë∆∞·ª£c load d·ª±a tr√™n table.tableInfo.id
                // L∆ØU √ù: id ƒë√£ ƒë∆∞·ª£c replace '.' -> '_', c·∫ßn map ng∆∞·ª£c l·∫°i
                var tableId = table.tableInfo.id;  // VD: "SAMPLE_dbo_GIAODICH"
                console.log(`üîÑ ƒêang t·∫£i d·ªØ li·ªáu cho table id: ${tableId}`);
                
                // T√¨m t√™n b·∫£ng g·ªëc t·ª´ selectedTables
                var currentTableName = null;
                for (var i = 0; i < selectedTables.length; i++) {
                    var originalName = selectedTables[i];
                    var normalizedId = originalName.replace(/\./g, '_');
                    if (normalizedId === tableId) {
                        currentTableName = originalName;
                        break;
                    }
                }
                
                if (!currentTableName) {
                    tableau.abortWithError(`Kh√¥ng t√¨m th·∫•y b·∫£ng v·ªõi id: ${tableId}`);
                    return;
                }
                
                console.log(`üîÑ ƒêang t·∫£i d·ªØ li·ªáu cho b·∫£ng: ${currentTableName}`);
                
                // API endpoint cho b·∫£ng hi·ªán t·∫°i (d√πng t√™n g·ªëc c√≥ d·∫•u ch·∫•m)
                var apiUrl = `/api/data/${currentTableName}?limit=${connectionData.limit}&order=${connectionData.order}`;
                if (connectionData.database) {
                    apiUrl += `&database=${encodeURIComponent(connectionData.database)}`;
                }
                if (connectionData.where) {
                    apiUrl += `&where=${encodeURIComponent(connectionData.where)}`;
                }
                
                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data) {
                            console.log(`‚úÖ ƒê√£ t·∫£i ${data.data.length} d√≤ng t·ª´ b·∫£ng ${currentTableName}`);
                            table.appendRows(data.data);
                        } else {
                            console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ b·∫£ng ${currentTableName}`);
                        }
                        doneCallback();
                    })
                    .catch(error => {
                        console.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu b·∫£ng ${currentTableName}:`, error);
                        tableau.abortWithError(`Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng ${currentTableName}`);
                    });
            };
            
            // ƒêƒÉng k√Ω connector
            tableau.registerConnector(myConnector);
            
            // X·ª≠ l√Ω s·ª± ki·ªán submit cho nhi·ªÅu database & nhi·ªÅu b·∫£ng
            document.getElementById("submitButton").addEventListener("click", function() {
                var selectedDatabases = getSelectedDatabases();
                var selectedTables = getSelectedTables();
                var limit = document.getElementById("limitSelect").value;
                var order = document.getElementById("orderSelect").value;
                var where = document.getElementById("whereInput").value;
                
                if (selectedDatabases.length === 0) {
                    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt database");
                    return;
                }
                
                if (selectedTables.length === 0) {
                    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·∫£ng d·ªØ li·ªáu");
                    return;
                }
                
                // Connection data v·ªõi format m·ªõi
                tableau.connectionData = JSON.stringify({
                    "databases": selectedDatabases,  // Array c·ªßa database names
                    "tables": selectedTables,         // Array format: ["DB.Table", "DB2.Table2"]
                    "limit": limit,
                    "order": order,
                    "where": where
                });
                
                // T·∫°o t√™n connection
                if (selectedDatabases.length === 1 && selectedTables.length === 1) {
                    tableau.connectionName = `${selectedTables[0]} (${limit === '0' ? 'T·∫•t c·∫£' : limit} d√≤ng)`;
                } else if (selectedDatabases.length === 1) {
                    tableau.connectionName = `${selectedDatabases[0]} - ${selectedTables.length} b·∫£ng`;
                } else {
                    tableau.connectionName = `${selectedDatabases.length} databases - ${selectedTables.length} b·∫£ng`;
                }
                
                console.log("üöÄ K·∫øt n·ªëi Tableau v·ªõi:", {
                    databases: selectedDatabases,
                    tables: selectedTables,
                    limit: limit
                });
                
                tableau.submit();
            });
        })();
    </script>
</body>
</html>
'''

# Routes
@app.route('/')
def tableau_wdc():
    """
    Trang ch√≠nh c·ªßa Tableau Universal Database Connector
    """
    return render_template_string(TABLEAU_WDC_TEMPLATE)

@app.route('/api/database-info')
def database_info():
    """
    L·∫•y th√¥ng tin database hi·ªán t·∫°i
    """
    try:
        config = doc_cau_hinh_database()
        bang_list = lay_danh_sach_bang()
        
        return jsonify({
            "success": True,
            "server": config['server'],
            "port": config['port'],
            "database": config['database'],
            "table_count": len(bang_list)
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/api/databases')
def list_databases():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ databases
    """
    try:
        database_list = lay_danh_sach_database()
        return jsonify({
            "success": True,
            "databases": database_list
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "databases": []
        })

@app.route('/api/tables')
def list_tables():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng trong database
    """
    try:
        database_name = request.args.get('database', None)
        bang_list = lay_danh_sach_bang(database_name)
        return jsonify({
            "success": True,
            "tables": bang_list,
            "database": database_name or doc_cau_hinh_database()['database']
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "tables": []
        })

@app.route('/api/schema/<path:table_name>')
def get_table_schema(table_name):
    """
    L·∫•y schema c·ªßa b·∫£ng - h·ªó tr·ª£ format Database.Schema.Table
    """
    try:
        # Parse table_name ƒë·ªÉ t√°ch database (n·∫øu c√≥)
        # Format c√≥ th·ªÉ l√†: "Table", "Schema.Table", ho·∫∑c "Database.Schema.Table"
        parts = table_name.split('.')
        
        if len(parts) == 3:
            # Format: Database.Schema.Table
            extracted_db = parts[0]
            schema_table = f"{parts[1]}.{parts[2]}"  # Schema.Table
            database_name = extracted_db
            print(f"üîç Parse format Database.Schema.Table: db='{extracted_db}', table='{schema_table}'")
        elif len(parts) == 2:
            # Format: Schema.Table (d√πng database t·ª´ query param ho·∫∑c config)
            schema_table = table_name  # Gi·ªØ nguy√™n Schema.Table
            database_name = request.args.get('database', None)
            print(f"üîç Parse format Schema.Table: table='{schema_table}', database='{database_name}'")
        else:
            # Format: Table (ch·ªâ c√≥ t√™n b·∫£ng)
            schema_table = table_name
            database_name = request.args.get('database', None)
            print(f"üîç Parse format Table: table='{schema_table}', database='{database_name}'")
        
        print(f"üîç ƒêang l·∫•y schema cho: table='{schema_table}', database='{database_name}'")
        
        schema = tu_dong_phat_hien_schema(schema_table, database_name)
        if schema and schema.get('columns'):
            print(f"‚úÖ T√¨m th·∫•y {len(schema.get('columns', []))} c·ªôt cho b·∫£ng '{schema_table}'")
            return jsonify({
                "success": True,
                "schema": schema
            })
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y schema cho b·∫£ng '{schema_table}'")
            return jsonify({
                "success": False,
                "error": f"Kh√¥ng th·ªÉ l·∫•y schema cho b·∫£ng '{schema_table}'"
            })
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y schema: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        })

@app.route('/api/data/<path:table_name>')
def get_table_data(table_name):
    """
    L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng - h·ªó tr·ª£ format Database.Schema.Table
    """
    try:
        config = doc_cau_hinh_database()
        
        # Parse table_name ƒë·ªÉ t√°ch database (n·∫øu c√≥)
        parts = table_name.split('.')
        
        if len(parts) == 3:
            # Format: Database.Schema.Table
            extracted_db = parts[0]
            schema_table = f"{parts[1]}.{parts[2]}"  # Schema.Table
            database_name = extracted_db
            print(f"üîç Parse format Database.Schema.Table: db='{extracted_db}', table='{schema_table}'")
        elif len(parts) == 2:
            # Format: Schema.Table
            schema_table = table_name
            database_name = request.args.get('database', None)
            print(f"üîç Parse format Schema.Table: table='{schema_table}', database='{database_name}'")
        else:
            # Format: Table
            schema_table = table_name
            database_name = request.args.get('database', None)
            print(f"üîç Parse format Table: table='{schema_table}', database='{database_name}'")
        
        db_name = database_name if database_name else config['database']
            
        limit = request.args.get('limit', '1000')
        order = request.args.get('order', 'auto')
        where_clause = request.args.get('where', '')
        
        print(f"üîÑ ƒêang l·∫•y d·ªØ li·ªáu: table='{schema_table}', database='{db_name}', limit={limit}")
        
        # X√¢y d·ª±ng c√¢u truy v·∫•n
        if limit == '0':
            limit_clause = ""
            limit_int = 0
        else:
            limit_clause = f"TOP {limit}"
            limit_int = int(limit)
        
        # X·ª≠ l√Ω ORDER BY
        if order == 'random':
            order_clause = "ORDER BY NEWID()"
        elif order == 'auto':
            order_clause = ""
        else:
            order_clause = ""
        
        # X·ª≠ l√Ω WHERE
        if where_clause:
            where_sql = f"WHERE {where_clause}"
        else:
            where_sql = ""
        
        query = f"SELECT {limit_clause} * FROM [{schema_table}] {where_sql} {order_clause}"
        
        # Lay du lieu bang module moi
        du_lieu_json, columns = db_conn.lay_du_lieu_bang(schema_table, db_name, limit_int)
        
        print(f"‚úÖ ƒê√£ l·∫•y {len(du_lieu_json)} d√≤ng t·ª´ '{schema_table}'")
        
        return jsonify({
            "success": True,
            "data": du_lieu_json,
            "count": len(du_lieu_json),
            "table": schema_table,
            "database": db_name,
            "query": query,
            "timestamp": datetime.now().isoformat(),
            "message": f"L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng {schema_table} th√†nh c√¥ng"
        })
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
        return jsonify({
            "success": False,
            "error": str(e),
            "data": []
        })

if __name__ == '__main__':
    
    print("üåê TABLEAU UNIVERSAL DATABASE CONNECTOR")
    print("=" * 55)
    print("üöÄ ƒêang kh·ªüi ƒë·ªông server...")
    print("üîó URL cho Tableau: http://127.0.0.1:5002")
    print("üìä C·∫•u h√¨nh database: config/database_config.json")
    print("")
    print("üéØ T√çNH NƒÇNG N√ÇNG C·∫§P - FOCUS NHI·ªÄU B·∫¢NG:")
    print("  ‚úÖ Ch·ªçn nhi·ªÅu b·∫£ng c√πng l√∫c b·∫±ng checkbox")
    print("  ‚úÖ M·ªói b·∫£ng l√† m·ªôt dataset ri√™ng bi·ªát trong Tableau")
    print("  ‚úÖ KH√îNG t·ª± ƒë·ªông k·∫øt h·ª£p d·ªØ li·ªáu")
    print("  ‚úÖ User c√≥ th·ªÉ ch·ªçn t·ª´ng b·∫£ng ƒë·ªÉ ph√¢n t√≠ch")
    print("  ‚úÖ H·ªó tr·ª£ c√¢u truy v·∫•n WHERE t√πy ch·ªânh")
    print("")

    print("‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server")
    print("=" * 55)
    
    app.run(debug=True, host='127.0.0.1', port=5002)
